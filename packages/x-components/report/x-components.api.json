{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.7.8",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@empathy/x-components!",
  "docComment": "",
  "name": "@empathy/x-components",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@empathy/x-components!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ActionsClass:type",
          "docComment": "/**\n * Type for implementing actions for a module with a class.\n *\n * @param Module - The module this actions belong to.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ActionsClass<Module extends "
            },
            {
              "kind": "Reference",
              "text": "AnyXStoreModule",
              "canonicalReference": "@empathy/x-components!AnyXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<Module['actions']>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ActionsClass",
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ActionsDictionary:type",
          "docComment": "/**\n * Util type for being used on generic constraints which will only accept an object containing actions.\n *\n * @example\n *\n * Example constraint\n * ```typescript\n *  // This function allows receiving any object who only contains actions;\n *  function sampleFunction\\<Actions extends ActionsDictionary\\<Actions\\>\\>(actions: Actions): void;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ActionsDictionary<Actions> = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof Actions, (payload?: any) => any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ActionsDictionary",
          "typeParameters": [
            {
              "typeParameterName": "Actions",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ActionsTree:type",
          "docComment": "/**\n * Type-safe actions definition type. An object with this type is what it is needed to define {@link https://vuex.vuejs.org/ | Vuex} actions.\n *\n * @param State - The module state dictionary type definition.\n *\n * @param Getters - The module getters dictionary type definition.\n *\n * @param Mutations - The module mutation dictionary type definition.\n *\n * @param Actions - The module actions dictionary type definition.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ActionsTree<State extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", Getters extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", Mutations extends "
            },
            {
              "kind": "Reference",
              "text": "MutationsDictionary",
              "canonicalReference": "@empathy/x-components!MutationsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<Mutations>"
            },
            {
              "kind": "Content",
              "text": ", Actions extends "
            },
            {
              "kind": "Reference",
              "text": "ActionsDictionary",
              "canonicalReference": "@empathy/x-components!ActionsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<Actions>"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [Key in keyof Actions]: (context: "
            },
            {
              "kind": "Reference",
              "text": "XActionContext",
              "canonicalReference": "@empathy/x-components!XActionContext:interface"
            },
            {
              "kind": "Content",
              "text": "<State, Getters, Mutations, Actions>, payload: "
            },
            {
              "kind": "Reference",
              "text": "ExtractPayload",
              "canonicalReference": "@empathy/x-components!ExtractPayload:type"
            },
            {
              "kind": "Content",
              "text": "<Actions[Key]>) => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<Actions[Key]> | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<Actions[Key]>>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ActionsTree",
          "typeParameters": [
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Getters",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Mutations",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Actions",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 11,
            "endIndex": 22
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!addQueryToHistory:var",
          "docComment": "/**\n * Default implementation for the {@link HistoryQueriesActions.addQueryToHistory}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions, provided by Vuex.\n *\n * @param query - The query to try to add to the history.\n *\n * @returns A `void` promise that resolves when the history queries finishes updating.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "addQueryToHistory: "
            },
            {
              "kind": "Content",
              "text": "({ state, dispatch }: "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesActionContext",
              "canonicalReference": "@empathy/x-components!HistoryQueriesActionContext:type"
            },
            {
              "kind": "Content",
              "text": ", query: string) => void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            }
          ],
          "releaseTag": "Public",
          "name": "addQueryToHistory",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!AddQueryToHistoryAction:class",
          "docComment": "/**\n * Class implementation for the {@link HistoryQueriesActions.addQueryToHistory} action.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AddQueryToHistoryAction implements "
            },
            {
              "kind": "Reference",
              "text": "ActionsClass",
              "canonicalReference": "@empathy/x-components!ActionsClass:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesXStoreModule",
              "canonicalReference": "@empathy/x-components!HistoryQueriesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "AddQueryToHistoryAction",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!AddQueryToHistoryAction#addQueryToHistory:member(1)",
              "docComment": "/**\n * Default implementation for the {@link HistoryQueriesActions.addQueryToHistory}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions, provided by Vuex.\n *\n * @param query - The query to try to add to the history.\n *\n * @returns A `void` promise that resolves when the history queries finishes updating.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addQueryToHistory({ state, dispatch }: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQueriesActionContext",
                  "canonicalReference": "@empathy/x-components!HistoryQueriesActionContext:type"
                },
                {
                  "kind": "Content",
                  "text": ", query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ state, dispatch }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addQueryToHistory"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!addQueryToHistoryQueries:var",
          "docComment": "/**\n * Saves a new query into the history queries.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "addQueryToHistoryQueries: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<string>"
            }
          ],
          "releaseTag": "Public",
          "name": "addQueryToHistoryQueries",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyActionsTree:type",
          "docComment": "/**\n * Alias for any actions tree. Use only when you really don't care about the actions type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyActionsTree = "
            },
            {
              "kind": "Reference",
              "text": "ActionsTree",
              "canonicalReference": "@empathy/x-components!ActionsTree:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "MutationsDictionary",
              "canonicalReference": "@empathy/x-components!MutationsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<any>, "
            },
            {
              "kind": "Reference",
              "text": "ActionsDictionary",
              "canonicalReference": "@empathy/x-components!ActionsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<any>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyActionsTree",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyFunction:type",
          "docComment": "/**\n * A function with 0 or more parameters of any type, which can return something or not.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyFunction = "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyFunction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyGettersTree:type",
          "docComment": "/**\n * Alias for any getters tree. Use only when you don't care about the type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyGettersTree = "
            },
            {
              "kind": "Reference",
              "text": "GettersTree",
              "canonicalReference": "@empathy/x-components!GettersTree:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyGettersTree",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyMutationsTree:type",
          "docComment": "/**\n * Alias for any mutations tree. Use only when the concrete type does not matter.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyMutationsTree = "
            },
            {
              "kind": "Reference",
              "text": "MutationsTree",
              "canonicalReference": "@empathy/x-components!MutationsTree:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "MutationsDictionary",
              "canonicalReference": "@empathy/x-components!MutationsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<any>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyMutationsTree",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnySimpleStateSelector:type",
          "docComment": "/**\n * Alias for any simple state selector.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnySimpleStateSelector = "
            },
            {
              "kind": "Reference",
              "text": "SimpleStateSelector",
              "canonicalReference": "@empathy/x-components!SimpleStateSelector:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnySimpleStateSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyStateSelector:type",
          "docComment": "/**\n * Alias for any state selector.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyStateSelector = "
            },
            {
              "kind": "Reference",
              "text": "StateSelector",
              "canonicalReference": "@empathy/x-components!StateSelector:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyStateSelector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyStoreEmitters:type",
          "docComment": "/**\n * Alias for any store emitters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyStoreEmitters = "
            },
            {
              "kind": "Reference",
              "text": "StoreEmitters",
              "canonicalReference": "@empathy/x-components!StoreEmitters:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyXStoreModule",
              "canonicalReference": "@empathy/x-components!AnyXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyStoreEmitters",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyWire:type",
          "docComment": "/**\n * Alias for a wire of any type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyWire = "
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyWire",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyXModule:type",
          "docComment": "/**\n * Alias for any XModule. Use with caution.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyXModule = "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyXStoreModule",
              "canonicalReference": "@empathy/x-components!AnyXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyXModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyXStoreModule:type",
          "docComment": "/**\n * Alias for an {@link XStoreModule} with any type. Use only when the state, getters, mutations and actions are not relevant.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyXStoreModule = "
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any, any, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyXStoreModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!AnyXStoreModuleOptions:type",
          "docComment": "/**\n * Alias for any store modules options. Use only when you don't care about the module concrete type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyXStoreModuleOptions = "
            },
            {
              "kind": "Reference",
              "text": "XStoreModuleOptions",
              "canonicalReference": "@empathy/x-components!XStoreModuleOptions:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyXStoreModule",
              "canonicalReference": "@empathy/x-components!AnyXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyXStoreModuleOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ArrowKey:type",
          "docComment": "/**\n * Union type containing the existing arrow keys.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ArrowKey = "
            },
            {
              "kind": "Content",
              "text": "'ArrowUp' | 'ArrowDown' | 'ArrowRight' | 'ArrowLeft'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ArrowKey",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!BaseEventButton:class",
          "docComment": "/**\n * Component to be reused that renders a `<button>` with the logic of emitting events to the bus on click. The events are passed as an object to prop {@link XEventsTypes | events}. The keys are the event name and the values are the payload of each event. All events are emitted with its respective payload. If any event doesn't need payload a `undefined` must be passed as value.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class BaseEventButton extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseEventButton",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!BaseEventButton#emitEvents:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected emitEvents(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "emitEvents"
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseEventButton#events:member",
              "docComment": "/**\n * (Required) A object where the keys are the {@link XEvent} and the values are the payload of each event.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected events: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!BaseModalContainer:class",
          "docComment": "/**\n * Component containing a modal container that emits a {@link XEventsTypes.UserClosedX} when clicking outside the content rendered in the default slot and can receive, through the eventsToCloseModal prop, a list of {@link XEvent | xEvents} to listen to in order to close also the modal. The default slot offers the possibility to customize the modal content.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class BaseModalContainer extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseModalContainer",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!BaseModalContainer#closeModalContainer:member(1)",
              "docComment": "/**\n * Close modal container.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeModalContainer(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "closeModalContainer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!BaseModalContainer#emitClose:member(1)",
              "docComment": "/**\n * Emits the {@link XEventsTypes.UserClosedX} when closing the container.\n *\n * @param event - The DOM event.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected emitClose(event: "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "emitClose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseModalContainer#eventsToCloseModal:member",
              "docComment": "/**\n * Array of {@link XEvent | xEvents} to listen to close the modal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected eventsToCloseModal: "
                },
                {
                  "kind": "Reference",
                  "text": "XEvent",
                  "canonicalReference": "@empathy/x-components!XEvent:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventsToCloseModal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseModalContainer#isOpen:member",
              "docComment": "/**\n * The modal container is open.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected isOpen: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!BaseModalContainer#mounted:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mounted(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "mounted"
            },
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!BaseModalContainer#openModalContainer:member(1)",
              "docComment": "/**\n * Open modal container.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openModalContainer(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "openModalContainer"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!BaseSuggestion:class",
          "docComment": "/**\n * Renders a button with a default slot. It receives a query, which should be the query of the module using this component, a suggestion and the {@link XEvent | XEvents} that will be emitted on click.\n *\n * The default slot receives the suggestion and the matched query has props.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class BaseSuggestion extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseSuggestion",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseSuggestion#dynamicCSSClasses:member",
              "docComment": "/**\n * Generates css classes dynamically.\n *\n * @remarks\n *\n * 'x-suggestion--has-matching-query added when the query should be matched.\n *\n * @returns The {@link VueCSSClasses} classes.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get dynamicCSSClasses(): "
                },
                {
                  "kind": "Reference",
                  "text": "VueCSSClasses",
                  "canonicalReference": "@empathy/x-components!VueCSSClasses:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dynamicCSSClasses",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseSuggestion#events:member",
              "docComment": "/**\n * The event handler that will be triggered when clicking on a suggestion.\n *\n * @remarks\n *\n * * UserAcceptedAQuery: suggestion.query * UserSelectedASuggestion: suggestion * Merges the events defined in the suggestionSelectedEvents prop and also emits them\n *\n * @returns The {@link XEvent | XEvents} to emit.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get events(): "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseSuggestion#query:member",
              "docComment": "/**\n * The normalized query of the module using this component.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseSuggestion#queryHTML:member",
              "docComment": "/**\n * Highlights the matching part of the suggestion query with the query passed as prop of the component putting it inside a `<span>` tag.\n *\n * @remarks\n *\n * The query prop should be normalized.\n *\n * @returns The suggestion's query with the matching part inside a `<span>` tag.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get queryHTML(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "queryHTML",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseSuggestion#suggestion:member",
              "docComment": "/**\n * The suggestion to render and use in the default slot.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestion: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseSuggestion#suggestionSelectedEvents:member",
              "docComment": "/**\n * The {@link XEvent | XEvents} that will be emitted when selecting a suggestion.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestionSelectedEvents: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionSelectedEvents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!BaseSuggestions:class",
          "docComment": "/**\n * Paints a list of suggestions passed in by prop. Requires a component for a single suggestion in the default slot for working.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class BaseSuggestions extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseSuggestions",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!BaseSuggestions#suggestions:member",
              "docComment": "/**\n * The list of suggestions to render.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!BaseXAPI:class",
          "docComment": "/**\n * Default implementation for {@link XAPI}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BaseXAPI implements "
            },
            {
              "kind": "Reference",
              "text": "XAPI",
              "canonicalReference": "@empathy/x-components!XAPI:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseXAPI",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!BaseXAPI#search:member(1)",
              "docComment": "/**\n * Searches the query parameter as user query.\n *\n * @param query - Query to be searched.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "search(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "search"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!BaseXBus:class",
          "docComment": "/**\n * Default {@link XBus} implementation.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BaseXBus implements "
            },
            {
              "kind": "Reference",
              "text": "XBus",
              "canonicalReference": "@empathy/x-components!XBus:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseXBus",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!BaseXBus#emit:member(1)",
              "docComment": "/**\n * Emits an event. See {@link XBus.(emit:2)}.\n *\n * @param event - Event to be emitted.\n *\n * @param payload - Event payload.\n *\n * @param metadata - Information of who emits the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit<Event extends "
                },
                {
                  "kind": "Reference",
                  "text": "XEvent",
                  "canonicalReference": "@empathy/x-components!XEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", payload?: "
                },
                {
                  "kind": "Reference",
                  "text": "XEventPayload",
                  "canonicalReference": "@empathy/x-components!XEventPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Event>"
                },
                {
                  "kind": "Content",
                  "text": ", metadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "WireMetadata",
                  "canonicalReference": "@empathy/x-components!WireMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "metadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "emit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!BaseXBus#on:member(1)",
              "docComment": "/**\n * Retrieves an observable. See {@link XBus.(on:3)}.\n *\n * @param event - Event to listener.\n *\n * @param withMetadata - Option to listener with info about event emitter.\n *\n * @returns The emitter for the event passed.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on<Event extends "
                },
                {
                  "kind": "Reference",
                  "text": "XEvent",
                  "canonicalReference": "@empathy/x-components!XEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", withMetadata?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WirePayload",
                  "canonicalReference": "@empathy/x-components!WirePayload:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventPayload",
                  "canonicalReference": "@empathy/x-components!XEventPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Event>> | "
                },
                {
                  "kind": "Reference",
                  "text": "XEventPayload",
                  "canonicalReference": "@empathy/x-components!XEventPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Event>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "withMetadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "on"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!ClearHistoryQueries:class",
          "docComment": "/**\n * A button that when is pressed, emits the {@link XEventsTypes.UserPressedClearHistoryQueries} event, expressing the user intention to clear the whole history of queries.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class ClearHistoryQueries extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ClearHistoryQueries",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!clearHistoryQueries:var",
          "docComment": "/**\n * Clears the history queries.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "clearHistoryQueries: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            }
          ],
          "releaseTag": "Public",
          "name": "clearHistoryQueries",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!clearHistoryQueriesQuery:var",
          "docComment": "/**\n * Sets the query of the history queries module to an empty string.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "clearHistoryQueriesQuery: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            }
          ],
          "releaseTag": "Public",
          "name": "clearHistoryQueriesQuery",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!clearQuerySuggestionsQuery:var",
          "docComment": "/**\n * Clears the query-suggestions module query.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "clearQuerySuggestionsQuery: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            }
          ],
          "releaseTag": "Public",
          "name": "clearQuerySuggestionsQuery",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!ClearSearchInput:class",
          "docComment": "/**\n * A button that when pressed emits the {@link XEventsTypes.UserPressedClearSearchBoxButton} event, expressing the user intention to clear the current query.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class ClearSearchInput extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ClearSearchInput",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!ClearSearchInput#dynamicClasses:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get dynamicClasses(): "
                },
                {
                  "kind": "Reference",
                  "text": "VueCSSClasses",
                  "canonicalReference": "@empathy/x-components!VueCSSClasses:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dynamicClasses",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!ClearSearchInput#isQueryEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get isQueryEmpty(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isQueryEmpty",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!ClearSearchInput#query:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!CloseButton:class",
          "docComment": "/**\n * Component containing an event button that emits {@link XEventsTypes.UserClosedX} when clicked. It has a default slot to customize its content.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class CloseButton extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CloseButton",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!compileMessage:function(1)",
          "docComment": "/**\n * Replaces each key in compiledMessage for the provided key's value.\n *\n * @param message - String containing the keys to be replaced.\n *\n * @param params - Dictionary of key-values that will be used to format compiledMessage.\n *\n * @returns Formatted string.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function compileMessage(message: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", params: "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": "<string | number>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "name": "compileMessage"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!createStoreEmitters:function(1)",
          "docComment": "/**\n * Helper function for creating type-safe {@link StoreEmitters}.\n *\n * @param storeModule - The store module that the emitters will be associated to.\n *\n * @param emitters - The {@link StoreEmitters} to create.\n *\n * @returns A type-safe function for storeEmitters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createStoreEmitters<Module extends "
            },
            {
              "kind": "Reference",
              "text": "AnyXStoreModule",
              "canonicalReference": "@empathy/x-components!AnyXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ", Emitters extends "
            },
            {
              "kind": "Reference",
              "text": "StoreEmitters",
              "canonicalReference": "@empathy/x-components!StoreEmitters:type"
            },
            {
              "kind": "Content",
              "text": "<Module>"
            },
            {
              "kind": "Content",
              "text": ">(storeModule: "
            },
            {
              "kind": "Content",
              "text": "Module"
            },
            {
              "kind": "Content",
              "text": ", emitters: "
            },
            {
              "kind": "Content",
              "text": "Emitters"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "Emitters"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "storeModule",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            },
            {
              "parameterName": "emitters",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Emitters",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createStoreEmitters"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!createWireFromFunction:function(1)",
          "docComment": "/**\n * Creates a wire that executes the function passed. This function will receive a {@link WireParams} object.\n *\n * @param fn - The function to execute whenever a new value is emitted to the observable.\n *\n * @returns The Wire function.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createWireFromFunction<Payload>(fn: "
            },
            {
              "kind": "Content",
              "text": "(parameters: "
            },
            {
              "kind": "Reference",
              "text": "WireParams",
              "canonicalReference": "@empathy/x-components!WireParams:interface"
            },
            {
              "kind": "Content",
              "text": "<Payload>) => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<Payload>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Payload",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createWireFromFunction"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!createWiring:function(1)",
          "docComment": "/**\n * Util function to generate type-safe wiring. If TypeScript ever accepts the PR about generic type inference this function can be removed.\n *\n * @param wiring - The wiring to create.\n *\n * @returns Type-safe wiring.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createWiring<T extends "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Wiring",
              "canonicalReference": "@empathy/x-components!Wiring:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ">(wiring: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "wiring",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createWiring"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!CurrencyOptions:interface",
          "docComment": "/**\n * Available options to format currency values.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CurrencyOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "CurrencyOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!CurrencyOptions#symbol:member",
              "docComment": "/**\n * Currency symbol (i.e. €, $, etc...).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "symbol: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "symbol",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!DecoratorFor:type",
          "docComment": "/**\n * Creates a decorator that will only work for properties of the type passed. The decorator will only work if the property is public.\n *\n * @param Type - The type of the properties that are allowed to be decorated.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DecoratorFor<Type> = "
            },
            {
              "kind": "Content",
              "text": "<Key extends string, Target extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<Key, Type>>(target: Target, key: Key) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DecoratorFor",
          "typeParameters": [
            {
              "typeParameterName": "Type",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!DeepPartial:type",
          "docComment": "/**\n * Makes all the properties of the T type optional in depth.\n *\n * @param T - The type to make all its properties in depth optional.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DeepPartial<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]?: T[P] extends "
            },
            {
              "kind": "Reference",
              "text": "Primitive",
              "canonicalReference": "@empathy/x-components!Primitive:type"
            },
            {
              "kind": "Content",
              "text": " ? T[P] : "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "@empathy/x-components!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<T[P]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DeepPartial",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!DEFAULT_X_CONFIG:var",
          "docComment": "/**\n * Default global {@link XConfig}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_X_CONFIG: "
            },
            {
              "kind": "Reference",
              "text": "XConfig",
              "canonicalReference": "@empathy/x-components!XConfig:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "DEFAULT_X_CONFIG",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!Dictionary:type",
          "docComment": "/**\n * Object where all its properties are strings, and the value of them is defined by the type of the T property.\n *\n * @param T - The type of the properties of the object.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Dictionary<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Dictionary",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!DocumentDirection:type",
          "docComment": "/**\n * The HTML document direction orientation. Possible values: ltr (left to right) or rtl (right to left).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DocumentDirection = "
            },
            {
              "kind": "Content",
              "text": "'ltr' | 'rtl'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DocumentDirection",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!Emitter:type",
          "docComment": "/**\n * Type safe for emitter payload. It is the wire payload.\n *\n * @typeParam Event - The {@link XEvent} to extract its payload type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Emitter<Event extends "
            },
            {
              "kind": "Reference",
              "text": "XEvent",
              "canonicalReference": "@empathy/x-components!XEvent:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Subject",
              "canonicalReference": "rxjs!Subject:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WirePayload",
              "canonicalReference": "@empathy/x-components!WirePayload:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XEventPayload",
              "canonicalReference": "@empathy/x-components!XEventPayload:type"
            },
            {
              "kind": "Content",
              "text": "<Event>>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Emitter",
          "typeParameters": [
            {
              "typeParameterName": "Event",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!Emitters:type",
          "docComment": "/**\n * Type safe emitters dictionary, where each key is the {@link XEvent} name, and the value is a {@link https://rxjs.dev/api/index/class/Subject} of the {@link XEventPayload} type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Emitters = "
            },
            {
              "kind": "Content",
              "text": "{\n    [Event in "
            },
            {
              "kind": "Reference",
              "text": "XEvent",
              "canonicalReference": "@empathy/x-components!XEvent:type"
            },
            {
              "kind": "Content",
              "text": "]?: "
            },
            {
              "kind": "Reference",
              "text": "Emitter",
              "canonicalReference": "@empathy/x-components!Emitter:type"
            },
            {
              "kind": "Content",
              "text": "<Event>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Emitters",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!EmpathizeActions:interface",
          "docComment": "/**\n * Empathize store actions.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmpathizeActions "
            }
          ],
          "releaseTag": "Public",
          "name": "EmpathizeActions",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!EmpathizeConfig:interface",
          "docComment": "/**\n * Configuration options for the {@link EmpathizeXModule}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmpathizeConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "EmpathizeConfig",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!EmpathizeGetters:interface",
          "docComment": "/**\n * Empathize store getters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmpathizeGetters "
            }
          ],
          "releaseTag": "Public",
          "name": "EmpathizeGetters",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!EmpathizeMutations:interface",
          "docComment": "/**\n * Empathize store mutations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmpathizeMutations "
            }
          ],
          "releaseTag": "Public",
          "name": "EmpathizeMutations",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!EmpathizeState:interface",
          "docComment": "/**\n * Empathize store state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmpathizeState "
            }
          ],
          "releaseTag": "Public",
          "name": "EmpathizeState",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!EmpathizeXModule:type",
          "docComment": "/**\n * Empathize {@link XModule} alias.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EmpathizeXModule = "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EmpathizeXStoreModule",
              "canonicalReference": "@empathy/x-components!EmpathizeXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EmpathizeXModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!empathizeXModule:var",
          "docComment": "/**\n * Empathize {@link XModule} implementation. This module is auto-registered as soon as you import any component from the `empathize` entry point.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "empathizeXModule: "
            },
            {
              "kind": "Reference",
              "text": "EmpathizeXModule",
              "canonicalReference": "@empathy/x-components!EmpathizeXModule:type"
            }
          ],
          "releaseTag": "Public",
          "name": "empathizeXModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!EmpathizeXStoreModule:type",
          "docComment": "/**\n * Empathize type safe store module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EmpathizeXStoreModule = "
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EmpathizeState",
              "canonicalReference": "@empathy/x-components!EmpathizeState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "EmpathizeGetters",
              "canonicalReference": "@empathy/x-components!EmpathizeGetters:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "EmpathizeMutations",
              "canonicalReference": "@empathy/x-components!EmpathizeMutations:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "EmpathizeActions",
              "canonicalReference": "@empathy/x-components!EmpathizeActions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EmpathizeXStoreModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ExtractActionReturn:type",
          "docComment": "/**\n * Flattens the (probably) chained promises of an action type.\n *\n * @param Action - The action function to extract its type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExtractActionReturn<Action extends "
            },
            {
              "kind": "Content",
              "text": "(payload?: any) => any"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<Action> extends "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any> ? "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<Action> : "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<Action>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExtractActionReturn",
          "typeParameters": [
            {
              "typeParameterName": "Action",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 13
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ExtractActions:type",
          "docComment": "/**\n * Extracts the actions type from a XStoreModule.\n *\n * @param Module - The {@link XStoreModule} to extract its {@link ActionsDictionary}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExtractActions<Module extends "
            },
            {
              "kind": "Reference",
              "text": "AnyXModule",
              "canonicalReference": "@empathy/x-components!AnyXModule:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "Module extends "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any, any, infer Actions>> ? Actions : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExtractActions",
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ExtractGetters:type",
          "docComment": "/**\n * Util type for extracting the getter type of a module.\n *\n * @param Module - The module name to extract its getters type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExtractGetters<Module extends "
            },
            {
              "kind": "Reference",
              "text": "XModuleName",
              "canonicalReference": "@empathy/x-components!XModuleName:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Returns",
              "canonicalReference": "@empathy/x-components!Returns:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XModulesTree",
              "canonicalReference": "@empathy/x-components!XModulesTree:interface"
            },
            {
              "kind": "Content",
              "text": "[Module]['storeModule']['getters']>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExtractGetters",
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ExtractMutations:type",
          "docComment": "/**\n * Extracts the mutations type from a XStoreModule.\n *\n * @param Module - The {@link XStoreModule} to extract its {@link MutationsDictionary}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExtractMutations<Module extends "
            },
            {
              "kind": "Reference",
              "text": "AnyXModule",
              "canonicalReference": "@empathy/x-components!AnyXModule:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "Module extends "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any, infer Mutations, any>> ? Mutations : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExtractMutations",
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ExtractPayload:type",
          "docComment": "/**\n * Extracts the payload from any function with a single parameter.\n *\n * @param Function - A function type with one parameter and any return type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExtractPayload<Function extends "
            },
            {
              "kind": "Content",
              "text": "(payload?: any) => any"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<Function>[0]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExtractPayload",
          "typeParameters": [
            {
              "typeParameterName": "Function",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!ExtractState:type",
          "docComment": "/**\n * Util type for extracting the state type of a module.\n *\n * @param Module - The module name to extract its state type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExtractState<Module extends "
            },
            {
              "kind": "Reference",
              "text": "XModuleName",
              "canonicalReference": "@empathy/x-components!XModuleName:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XModulesTree",
              "canonicalReference": "@empathy/x-components!XModulesTree:interface"
            },
            {
              "kind": "Content",
              "text": "[Module]['storeModule']['state']>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExtractState",
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!forEach:function(1)",
          "docComment": "/**\n * Iterates over every non-undefined property of the object calling the callback passed as parameter.\n *\n * @param obj - The object to iterate through each property.\n *\n * @param callbackFn - The callback function to call for each property.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function forEach<T extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ">(obj: "
            },
            {
              "kind": "Content",
              "text": "T | undefined | null"
            },
            {
              "kind": "Content",
              "text": ", callbackFn: "
            },
            {
              "kind": "Content",
              "text": "(key: keyof T, value: "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<T[keyof T], undefined>, index: number) => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "callbackFn",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "forEach"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!getAndSaveNextQueries:var",
          "docComment": "/**\n * Requests and stores the next queries.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getAndSaveNextQueries: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            }
          ],
          "releaseTag": "Public",
          "name": "getAndSaveNextQueries",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!getAndSaveSuggestions:var",
          "docComment": "/**\n * Requests and stores a new set of query suggestions for the {@link QuerySuggestionsState.query}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getAndSaveSuggestions: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            }
          ],
          "releaseTag": "Public",
          "name": "getAndSaveSuggestions",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!getRootXComponent:function(1)",
          "docComment": "/**\n * Given a component, finds the root XComponent in the ancestors hierarchy.\n *\n * @param component - The component to find its root XComponent.\n *\n * @returns The root XComponent or undefined if it has not.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRootXComponent(component: "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "XComponent",
              "canonicalReference": "@empathy/x-components!XComponent:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "component",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getRootXComponent"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!Getter:function(1)",
          "docComment": "/**\n * Generates a computed property which returns the selected getter value.\n *\n * The decorated property needs to be public for type inference to work.\n *\n * @param module - The {@link XModuleName} of the getter.\n *\n * @param getter - The getter name.\n *\n * @returns Decorator with the getters of the module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function Getter<Module extends "
            },
            {
              "kind": "Reference",
              "text": "XModuleName",
              "canonicalReference": "@empathy/x-components!XModuleName:type"
            },
            {
              "kind": "Content",
              "text": ", GetterName extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "ExtractGetters",
              "canonicalReference": "@empathy/x-components!ExtractGetters:type"
            },
            {
              "kind": "Content",
              "text": "<Module>"
            },
            {
              "kind": "Content",
              "text": ">(module: "
            },
            {
              "kind": "Content",
              "text": "Module"
            },
            {
              "kind": "Content",
              "text": ", getter: "
            },
            {
              "kind": "Content",
              "text": "GetterName"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DecoratorFor",
              "canonicalReference": "@empathy/x-components!DecoratorFor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExtractGetters",
              "canonicalReference": "@empathy/x-components!ExtractGetters:type"
            },
            {
              "kind": "Content",
              "text": "<Module>[GetterName]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "module",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "getter",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "GetterName",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Getter"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!GettersClass:type",
          "docComment": "/**\n * Type for implementing getters for a module with a class.\n *\n * @param Module - The module this getters belong to.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type GettersClass<Module extends "
            },
            {
              "kind": "Reference",
              "text": "AnyXStoreModule",
              "canonicalReference": "@empathy/x-components!AnyXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<Module['getters']>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GettersClass",
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!GettersTree:type",
          "docComment": "/**\n * Type safe getters definition type. An object with this type is what it is needed to define {@link https://vuex.vuejs.org/ | Vuex} getters.\n *\n * @param State - The module state dictionary type definition.\n *\n * @param Getters - The module getters dictionary type definition.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type GettersTree<State extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", Getters extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [Key in keyof Getters]: (state: State, getters: Getters, rootState: "
            },
            {
              "kind": "Reference",
              "text": "RootXStoreState",
              "canonicalReference": "@empathy/x-components!RootXStoreState:interface"
            },
            {
              "kind": "Content",
              "text": ", rootGetters: any) => Getters[Key];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GettersTree",
          "typeParameters": [
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Getters",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!getURLParameter:var",
          "docComment": "/**\n * Get one parameter value from the url.\n *\n * @param param - The parameter to get from the url.\n *\n * @returns The parameter value from the url.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getURLParameter: "
            },
            {
              "kind": "Content",
              "text": "(param: string) => string | null"
            }
          ],
          "releaseTag": "Public",
          "name": "getURLParameter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!HistoryQueries:class",
          "docComment": "/**\n * This component renders a list of suggestions coming from the user queries history.\n *\n * @remarks\n *\n * Allows the user to select one of them, emitting the needed events. A history query is just another type of suggestion that contains a query that the user has made in the past.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class HistoryQueries extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueries",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!historyQueries:var",
          "docComment": "/**\n * Default implementation for the {@link HistoryQueriesGetters.historyQueries} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the history queries module.\n *\n * @returns The filtered subset of queries, matching with the current query.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "historyQueries: "
            },
            {
              "kind": "Content",
              "text": "({ query, historyQueries, config }: "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesState",
              "canonicalReference": "@empathy/x-components!HistoryQueriesState:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "HistoryQuery",
              "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            }
          ],
          "releaseTag": "Public",
          "name": "historyQueries",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!HistoryQueriesActionContext:type",
          "docComment": "/**\n * Alias type for actions context of the {@link HistoryQueriesXStoreModule}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type HistoryQueriesActionContext = "
            },
            {
              "kind": "Reference",
              "text": "XActionContext",
              "canonicalReference": "@empathy/x-components!XActionContext:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesState",
              "canonicalReference": "@empathy/x-components!HistoryQueriesState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesGetters",
              "canonicalReference": "@empathy/x-components!HistoryQueriesGetters:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesMutations",
              "canonicalReference": "@empathy/x-components!HistoryQueriesMutations:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesActions",
              "canonicalReference": "@empathy/x-components!HistoryQueriesActions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueriesActionContext",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!HistoryQueriesActions:interface",
          "docComment": "/**\n * HistoryQueries store actions.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HistoryQueriesActions "
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueriesActions",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesActions#addQueryToHistory:member(1)",
              "docComment": "/**\n * Saves a query to the history, synchronizing it with the browser storage. There are 3 possible cases.\n *\n * @param query - The query to add to the history.\n *\n * @example\n *\n * When the query is totally new, it is simply added to the first position of the history.\n * ```ts\n * const = historyQueries ['pork', 'cow'];\n * addQueryToHistory('goat');\n * // historyQueries is now ['goat', 'pork', 'cow'];\n * ```\n *\n * ```ts\n * const = historyQueries ['pork', 'cow'];\n * addQueryToHistory('iberic pork');\n * // historyQueries is now ['iberic pork', 'pork', 'cow'];\n * ```\n *\n * @example\n *\n * When the normalized query equals other one contained in the history or one of its words is more specific, the old one is removed, and the new one is added to the first position of the array. We use the space and dash characters as delimiters for detecting individual words.\n * ```ts\n * const = historyQueries ['tomahack', 'new york st'];\n * addQueryToHistory('new york strip');\n * // historyQueries is now ['new york strip', 'tomahack'];\n * ```\n *\n * ```ts\n * const = historyQueries ['tomahack', 'new york strip'];\n * addQueryToHistory('new york strip');\n * // historyQueries is now ['new york strip', 'tomahack'];\n * ```\n *\n * @example\n *\n * When the query is less specific than the last query, it is not added.\n * ```ts\n * const = historyQueries ['new york strip', 'tomahack'];\n * addQueryToHistory('new york st');\n * // historyQueries is now ['new york strip', 'tomahack'];\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addQueryToHistory(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addQueryToHistory"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesActions#loadHistoryQueriesFromBrowserStorage:member(1)",
              "docComment": "/**\n * Loads the {@link HistoryQueriesState.historyQueries | historyQueries} property from the browser storage.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadHistoryQueriesFromBrowserStorage(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "loadHistoryQueriesFromBrowserStorage"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesActions#refreshSession:member(1)",
              "docComment": "/**\n * Refreshes the current search session, updating its TTL.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refreshSession(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "refreshSession"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesActions#removeFromHistory:member(1)",
              "docComment": "/**\n * Removes a single query from the history, synchronizing it with the browser storage.\n *\n * @param historyQuery - The `HistoryQuery` to remove.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeFromHistory(historyQuery: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "historyQuery",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeFromHistory"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesActions#setHistoryQueries:member(1)",
              "docComment": "/**\n * Sets the history queries, synchronizing them with the browser storage. It also removes the oldest query if the history queries length is bigger than the {@link HistoryQueriesConfig.maxItemsToRender}.\n *\n * @param historyQueries - The new history queries to save to the state and the browser storage.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setHistoryQueries(historyQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "historyQueries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setHistoryQueries"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!HistoryQueriesConfig:interface",
          "docComment": "/**\n * Configuration options for the {@link HistoryQueriesXModule}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HistoryQueriesConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueriesConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesConfig#debounceInMs:member",
              "docComment": "/**\n * Time in milliseconds for applying a debounce when setting the module query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debounceInMs: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "debounceInMs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesConfig#hideIfEqualsQuery:member",
              "docComment": "/**\n * Hides a history query if it is equal to the current query of the module.\n *\n * @example\n *\n * When `hideIfEqualsQuery` is set to `true`, and given the following queries in the history: `ribs`, `ribeye`, `new york strip`, `angus new york strip` and `pork belly`; and the query `new york strip`, the only displayed history query will be `angus new york strip`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hideIfEqualsQuery: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hideIfEqualsQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesConfig#maxItemsToRender:member",
              "docComment": "/**\n * Maximum number of history queries to show. It should be a lower number than the {@link HistoryQueriesConfig.maxItemsToStore}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxItemsToRender: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxItemsToRender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesConfig#maxItemsToStore:member",
              "docComment": "/**\n * Maximum number of history queries to save in the browser.\n *\n * @example\n *\n * With `maxItemsToStore: 100` and `maxItemsToRender: 5` you are saving last 100 queries, but only showing last 5.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxItemsToStore: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxItemsToStore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesConfig#sessionTTLInMs:member",
              "docComment": "/**\n * Time in milliseconds to keep the session alive. After this time has passed with no user interaction, the session will be cleared.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sessionTTLInMs: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sessionTTLInMs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!HistoryQueriesGetter:class",
          "docComment": "/**\n * Class implementation for the {@link HistoryQueriesGetters.historyQueries} getter.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class HistoryQueriesGetter implements "
            },
            {
              "kind": "Reference",
              "text": "GettersClass",
              "canonicalReference": "@empathy/x-components!GettersClass:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesXStoreModule",
              "canonicalReference": "@empathy/x-components!HistoryQueriesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueriesGetter",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!HistoryQueriesGetter#historyQueries:member(1)",
              "docComment": "/**\n * Default implementation for the {@link HistoryQueriesGetters.historyQueries} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the history queries module.\n *\n * @returns The filtered subset of queries, matching with the current query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "historyQueries({ query, historyQueries, config }: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQueriesState",
                  "canonicalReference": "@empathy/x-components!HistoryQueriesState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ query, historyQueries, config }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "historyQueries"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!HistoryQueriesGetters:interface",
          "docComment": "/**\n * HistoryQueries store getters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HistoryQueriesGetters "
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueriesGetters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesGetters#historyQueries:member",
              "docComment": "/**\n * A sub-set of the {@link HistoryQueriesState.historyQueries} with a maximum length set in {@link HistoryQueriesConfig.maxItemsToRender}. If the {@link HistoryQueriesState.query} property is not empty, this list will only contain suggestions whose query matches with it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "historyQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "historyQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesGetters#sessionHistoryQueries:member",
              "docComment": "/**\n * A list of the queries that have been made in the last period of time specified by {@link HistoryQueriesConfig.sessionTTLInMs}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sessionHistoryQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sessionHistoryQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesGetters#storageKey:member",
              "docComment": "/**\n * The key for saving the {@link HistoryQueriesState.historyQueries} in the browser storage.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storageKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "storageKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!HistoryQueriesMutations:interface",
          "docComment": "/**\n * HistoryQueries store mutations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HistoryQueriesMutations "
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueriesMutations",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesMutations#setHistoryQueries:member(1)",
              "docComment": "/**\n * Sets the {@link HistoryQueriesState.historyQueries} property.\n *\n * @param historyQueries - The new {@link HistoryQueriesState.historyQueries}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setHistoryQueries(historyQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "historyQueries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setHistoryQueries"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesMutations#setQuery:member(1)",
              "docComment": "/**\n * Sets the {@link HistoryQueriesState.query} property.\n *\n * @param query - The new {@link HistoryQueriesState.query}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setQuery(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setQuery"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesMutations#setSessionTimeStamp:member(1)",
              "docComment": "/**\n * Sets the {@link HistoryQueriesState.sessionTimeStampInMs} property.\n *\n * @param timeStamp - The new {@link HistoryQueriesState.sessionTimeStampInMs}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSessionTimeStamp(timeStamp: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "timeStamp",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setSessionTimeStamp"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!HistoryQueriesState:interface",
          "docComment": "/**\n * HistoryQueries store state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HistoryQueriesState "
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueriesState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesState#config:member",
              "docComment": "/**\n * Configuration for the `HistoryQueries` module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQueriesConfig",
                  "canonicalReference": "@empathy/x-components!HistoryQueriesConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesState#historyQueries:member",
              "docComment": "/**\n * The full list of queries made by the user. This list is persisted along different search sessions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "historyQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "historyQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesState#query:member",
              "docComment": "/**\n * The current query for searching into the {@link HistoryQueriesState.historyQueries}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!HistoryQueriesState#sessionTimeStampInMs:member",
              "docComment": "/**\n * Timestamp that indicates when the current search session has started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sessionTimeStampInMs: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sessionTimeStampInMs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!HistoryQueriesXModule:type",
          "docComment": "/**\n * HistoryQueries {@link XModule} alias.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type HistoryQueriesXModule = "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesXStoreModule",
              "canonicalReference": "@empathy/x-components!HistoryQueriesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueriesXModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!historyQueriesXModule:var",
          "docComment": "/**\n * HistoryQueries {@link XModule} implementation. This module is auto-registered as soon as you import any component from the `history-queries` entry point.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "historyQueriesXModule: "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesXModule",
              "canonicalReference": "@empathy/x-components!HistoryQueriesXModule:type"
            }
          ],
          "releaseTag": "Public",
          "name": "historyQueriesXModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!HistoryQueriesXStoreModule:type",
          "docComment": "/**\n * HistoryQueries type safe store module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type HistoryQueriesXStoreModule = "
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesState",
              "canonicalReference": "@empathy/x-components!HistoryQueriesState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesGetters",
              "canonicalReference": "@empathy/x-components!HistoryQueriesGetters:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesMutations",
              "canonicalReference": "@empathy/x-components!HistoryQueriesMutations:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesActions",
              "canonicalReference": "@empathy/x-components!HistoryQueriesActions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQueriesXStoreModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!HistoryQuery:class",
          "docComment": "/**\n * This component renders a history query suggestion combining two buttons: one for selecting this suggestion as the search query, and another one to remove this query suggestion from the history queries.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class HistoryQuery extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "HistoryQuery",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!HistoryQuery#suggestion:member",
              "docComment": "/**\n * The history query suggestion to render.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestion: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQueryModel",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!installX:function(1)",
          "docComment": "/**\n * Function to install the {@link XPlugin} with the core functionality and the {@link XAPI} exposes through the {@link https://developer.mozilla.org/en-US/docs/Web/API/Window | window} property `X`.\n *\n * @param options - Options to customize the installation {@link XPluginOptions}.\n *\n * @param vue - Optional Vue constructor where the {@link XPlugin} will be installed.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function installX(options: "
            },
            {
              "kind": "Reference",
              "text": "XPluginOptions",
              "canonicalReference": "@empathy/x-components!XPluginOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", vue?: "
            },
            {
              "kind": "Content",
              "text": "import(\"vue\")."
            },
            {
              "kind": "Reference",
              "text": "VueConstructor",
              "canonicalReference": "vue!VueConstructor:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "vue",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            }
          ],
          "name": "installX"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!isArrayEmpty:function(1)",
          "docComment": "/**\n * Returns if the given array is `null`, `undefined`, or has no elements.\n *\n * @param array - The array to check if it is empty.\n *\n * @returns `true` if the array is `null`, `undefined`, or has no elements. `false` otherwise.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isArrayEmpty(array: "
            },
            {
              "kind": "Content",
              "text": "unknown[] | undefined | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "array",
              "canonicalReference": "@empathy/x-components!~array"
            },
            {
              "kind": "Content",
              "text": " is undefined | null | []"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isArrayEmpty"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!isXComponent:function(1)",
          "docComment": "/**\n * Returns if the component is an X-Component. An X-Component is a component that has an {@link XModule} associated to it.\n *\n * @param component - The component to check if it is an X-Component.\n *\n * @returns A boolean which flags if a component is a X-Component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isXComponent(component: "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "component",
              "canonicalReference": "@empathy/x-components!~component"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "XComponent",
              "canonicalReference": "@empathy/x-components!XComponent:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "component",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isXComponent"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!loadHistoryQueriesFromBrowserStorage:var",
          "docComment": "/**\n * Loads the history queries from the browser storage, saving them to the {@link HistoryQueriesState.historyQueries}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "loadHistoryQueriesFromBrowserStorage: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            }
          ],
          "releaseTag": "Public",
          "name": "loadHistoryQueriesFromBrowserStorage",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!map:function(1)",
          "docComment": "/**\n * Creates an object from another object transforming each property value.\n *\n * @param obj - The object to transform each property value.\n *\n * @param mapper - The mapper function which will transform each value.\n *\n * @returns A record with the result of the mapper.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function map<T extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", W>(obj: "
            },
            {
              "kind": "Content",
              "text": "T | undefined | null"
            },
            {
              "kind": "Content",
              "text": ", mapper: "
            },
            {
              "kind": "Content",
              "text": "(key: keyof T, value: "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<T[keyof T], undefined>, index: number) => W"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof T, W>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "mapper",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "W",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "map"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!Message:interface",
          "docComment": "/**\n * A message or a container of messages.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Message "
            }
          ],
          "releaseTag": "Public",
          "name": "Message",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@empathy/x-components!Message:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "Message",
                  "canonicalReference": "@empathy/x-components!Message:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!Messages:interface",
          "docComment": "/**\n * Components messages.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Messages "
            }
          ],
          "releaseTag": "Public",
          "name": "Messages",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!Messages#closeButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeButton: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ariaLabel: string;\n        content: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!Messages#custom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "custom?: "
                },
                {
                  "kind": "Reference",
                  "text": "Message",
                  "canonicalReference": "@empathy/x-components!Message:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "custom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!Messages#historyQueries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "historyQueries: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        clearButton: {\n            ariaLabel: string;\n            content: string;\n        };\n        removeHistoryQuery: {\n            ariaLabel: string;\n            content: string;\n        };\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "historyQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!Messages#noSuggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noSuggestions: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        content: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "noSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!Messages#openButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openButton: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ariaLabel: string;\n        content: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "openButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!Messages#searchBox:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchBox: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ariaLabel: string;\n        clearButton: {\n            ariaLabel: string;\n        };\n        placeholder: string;\n        searchButton: {\n            ariaLabel: string;\n        };\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "searchBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!MutationsDictionary:type",
          "docComment": "/**\n * Util type for being used on generic constraints which will only accept an object containing mutations.\n *\n * @example\n *\n * Example constraint\n * ```typescript\n *  // This function allows receiving any object who only contains mutations;\n *  function sampleFunction\\<Mutations extends MutationsDictionary\\<Mutations\\>\\>\n *    (mutations: Mutations): void;\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MutationsDictionary<Mutations> = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof Mutations, (payload?: any) => void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MutationsDictionary",
          "typeParameters": [
            {
              "typeParameterName": "Mutations",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!MutationsTree:type",
          "docComment": "/**\n * Type-safe mutations definition type. An object with this type is what it is needed to define {@link https://vuex.vuejs.org/ | Vuex} mutations.\n *\n * @param State - The module state dictionary type definition.\n *\n * @param Mutations - The module mutations dictionary type definition.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MutationsTree<State extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", Mutations extends "
            },
            {
              "kind": "Reference",
              "text": "MutationsDictionary",
              "canonicalReference": "@empathy/x-components!MutationsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<Mutations>"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [Key in keyof Mutations]: (state: State, payload: "
            },
            {
              "kind": "Reference",
              "text": "ExtractPayload",
              "canonicalReference": "@empathy/x-components!ExtractPayload:type"
            },
            {
              "kind": "Content",
              "text": "<Mutations[Key]>) => void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MutationsTree",
          "typeParameters": [
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Mutations",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 6,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!NamespacedWireFactory:interface",
          "docComment": "/**\n * Type safe wire factory, that provides methods for creating wires that can only access the Module of the {@link https://vuex.vuejs.org/ | Vuex} Store passed as parameter.\n *\n * @param Module - The {@link XStoreModule} to create the wires.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NamespacedWireFactory<ModuleName extends "
            },
            {
              "kind": "Reference",
              "text": "XModuleName",
              "canonicalReference": "@empathy/x-components!XModuleName:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ModuleName",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "NamespacedWireFactory",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NamespacedWireFactory#wireCommit:member(1)",
              "docComment": "/**\n * Creates a wire that commits a mutation to the store with an static payload. This wire can be used in every event, as it does not have a payload type associated.\n *\n * @param mutation - The name of the mutation of the module to execute. I.e. `setQuery`.\n *\n * @param payload - A static payload to pass to the mutation which will be committed OR a function that receives a {@link WirePayloadParams} to access the State and the Getters of the module and returns the payload.\n *\n * @returns {@link AnyWire} A wire that commits the mutation with the static payload or the returned value of the payload as a function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wireCommit<Mutations extends "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractMutations",
                  "canonicalReference": "@empathy/x-components!ExtractMutations:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XModulesTree",
                  "canonicalReference": "@empathy/x-components!XModulesTree:interface"
                },
                {
                  "kind": "Content",
                  "text": "[ModuleName]>"
                },
                {
                  "kind": "Content",
                  "text": ", MutationName extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<Mutations, (payload: any) => void>"
                },
                {
                  "kind": "Content",
                  "text": ">(mutation: "
                },
                {
                  "kind": "Content",
                  "text": "MutationName"
                },
                {
                  "kind": "Content",
                  "text": ", payload: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractPayload",
                  "canonicalReference": "@empathy/x-components!ExtractPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Mutations[MutationName]> | ((storeModule: "
                },
                {
                  "kind": "Reference",
                  "text": "WirePayloadParams",
                  "canonicalReference": "@empathy/x-components!WirePayloadParams:interface"
                },
                {
                  "kind": "Content",
                  "text": "<ModuleName>) => "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractPayload",
                  "canonicalReference": "@empathy/x-components!ExtractPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Mutations[MutationName]>)"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AnyWire",
                  "canonicalReference": "@empathy/x-components!AnyWire:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 19
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mutation",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 17
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Mutations",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "MutationName",
                  "constraintTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "wireCommit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NamespacedWireFactory#wireCommit:member(2)",
              "docComment": "/**\n * Creates a wire that commits a mutation to the store. This wire will commit to the store the payload that it receives in the observable.\n *\n * @param mutation - The name of the mutation of the module to execute. I.e. `setQuery`.\n *\n * @returns {@link Wire} A wire that commits the mutation with the payload that it receives in the observable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wireCommit<Mutations extends "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractMutations",
                  "canonicalReference": "@empathy/x-components!ExtractMutations:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XModulesTree",
                  "canonicalReference": "@empathy/x-components!XModulesTree:interface"
                },
                {
                  "kind": "Content",
                  "text": "[ModuleName]>"
                },
                {
                  "kind": "Content",
                  "text": ", MutationName extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<Mutations, (payload: any) => void>"
                },
                {
                  "kind": "Content",
                  "text": ">(mutation: "
                },
                {
                  "kind": "Content",
                  "text": "MutationName"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Wire",
                  "canonicalReference": "@empathy/x-components!Wire:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExtractPayload",
                  "canonicalReference": "@empathy/x-components!ExtractPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Mutations[MutationName]>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "mutation",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Mutations",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "MutationName",
                  "constraintTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "wireCommit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NamespacedWireFactory#wireCommitWithoutPayload:member(1)",
              "docComment": "/**\n * Creates a wire that commits a mutation to the store, but without any payload. This wire can be used in every event, as it does not have a payload type associated.\n *\n * @param mutation - The name of the mutation of the module to execute. I.e. `setQuery`.\n *\n * @returns {@link AnyWire} A wire that commits the mutation without any payload.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wireCommitWithoutPayload<Mutations extends "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractMutations",
                  "canonicalReference": "@empathy/x-components!ExtractMutations:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XModulesTree",
                  "canonicalReference": "@empathy/x-components!XModulesTree:interface"
                },
                {
                  "kind": "Content",
                  "text": "[ModuleName]>"
                },
                {
                  "kind": "Content",
                  "text": ", MutationName extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<Mutations, () => void>"
                },
                {
                  "kind": "Content",
                  "text": ">(mutation: "
                },
                {
                  "kind": "Content",
                  "text": "MutationName"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AnyWire",
                  "canonicalReference": "@empathy/x-components!AnyWire:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mutation",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Mutations",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "MutationName",
                  "constraintTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "wireCommitWithoutPayload"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NamespacedWireFactory#wireDispatch:member(1)",
              "docComment": "/**\n * Creates a wire that dispatches an action to the store with an static payload. This wire can be used in every event, as it does not have a payload type associated.\n *\n * @param action - The action name to commit. I.e. `getSuggestions`.\n *\n * @param staticPayload - A static payload to pass to the action which will be dispatched.\n *\n * @returns {@link AnyWire} A wire that dispatches the action with the staticPayload payload.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wireDispatch<Actions extends "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractActions",
                  "canonicalReference": "@empathy/x-components!ExtractActions:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XModulesTree",
                  "canonicalReference": "@empathy/x-components!XModulesTree:interface"
                },
                {
                  "kind": "Content",
                  "text": "[ModuleName]>"
                },
                {
                  "kind": "Content",
                  "text": ", ActionName extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<Actions, (payload: any) => void>"
                },
                {
                  "kind": "Content",
                  "text": ">(action: "
                },
                {
                  "kind": "Content",
                  "text": "ActionName"
                },
                {
                  "kind": "Content",
                  "text": ", staticPayload: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractPayload",
                  "canonicalReference": "@empathy/x-components!ExtractPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Actions[ActionName]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AnyWire",
                  "canonicalReference": "@empathy/x-components!AnyWire:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "action",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "staticPayload",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 13
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Actions",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "ActionName",
                  "constraintTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "wireDispatch"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NamespacedWireFactory#wireDispatch:member(2)",
              "docComment": "/**\n * Creates a wire that dispatches an action to the store. This wire will pass the payload received in the observable to the action.\n *\n * @param action - The action name to commit. I.e. `getSuggestions`.\n *\n * @typeParam Payload - the type of the payload that this wire will receive\n *\n * @returns {@link Wire} A wire that dispatches the action with the payload that it receives in the observable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wireDispatch<Actions extends "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractActions",
                  "canonicalReference": "@empathy/x-components!ExtractActions:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XModulesTree",
                  "canonicalReference": "@empathy/x-components!XModulesTree:interface"
                },
                {
                  "kind": "Content",
                  "text": "[ModuleName]>"
                },
                {
                  "kind": "Content",
                  "text": ", ActionName extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<Actions, (payload: any) => void>"
                },
                {
                  "kind": "Content",
                  "text": ">(action: "
                },
                {
                  "kind": "Content",
                  "text": "ActionName"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Wire",
                  "canonicalReference": "@empathy/x-components!Wire:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExtractPayload",
                  "canonicalReference": "@empathy/x-components!ExtractPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Actions[ActionName]>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "action",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Actions",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "ActionName",
                  "constraintTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "wireDispatch"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NamespacedWireFactory#wireDispatchWithoutPayload:member(1)",
              "docComment": "/**\n * Creates a wire that dispatches an action to the store, but without any payload. This wire can be used in every event, as it does not have a payload type associated.\n *\n * @param action - The action name to commit. I.e. `getSuggestions`.\n *\n * @returns {@link AnyWire} A wire that dispatches the action without any payload.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wireDispatchWithoutPayload<Actions extends "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractActions",
                  "canonicalReference": "@empathy/x-components!ExtractActions:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XModulesTree",
                  "canonicalReference": "@empathy/x-components!XModulesTree:interface"
                },
                {
                  "kind": "Content",
                  "text": "[ModuleName]>"
                },
                {
                  "kind": "Content",
                  "text": ", ActionName extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<Actions, () => void>"
                },
                {
                  "kind": "Content",
                  "text": ">(action: "
                },
                {
                  "kind": "Content",
                  "text": "ActionName"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AnyWire",
                  "canonicalReference": "@empathy/x-components!AnyWire:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "action",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Actions",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "ActionName",
                  "constraintTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "wireDispatchWithoutPayload"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!NextQueries:class",
          "docComment": "/**\n * Simple next-queries component that renders a list of suggestions, allowing the user to select one of them, and emitting the needed events. A next query is a suggestion for a new search, related to your previous query. I.e. If people normally search for `shirts`, and then `trousers`, `trousers` would be a next query of `shirts`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class NextQueries extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "NextQueries",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!NextQueries#nextQueries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQueryModel",
                  "canonicalReference": "@empathy/search-types!NextQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nextQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!NextQueriesActions:interface",
          "docComment": "/**\n * Next queries module actions.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NextQueriesActions "
            }
          ],
          "releaseTag": "Public",
          "name": "NextQueriesActions",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NextQueriesActions#getAndSaveNextQueries:member(1)",
              "docComment": "/**\n * Requests a new set of next queries and stores them in the module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAndSaveNextQueries(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getAndSaveNextQueries"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NextQueriesActions#getNextQueries:member(1)",
              "docComment": "/**\n * Requests a new set of next queries for the module query, and returns them .\n *\n * @returns An array of next queries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNextQueries(): "
                },
                {
                  "kind": "Reference",
                  "text": "NextQuery",
                  "canonicalReference": "@empathy/search-types!NextQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getNextQueries"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NextQueriesActions#setQueryFromLastHistoryQuery:member(1)",
              "docComment": "/**\n * Sets the query of the module based on the last history query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setQueryFromLastHistoryQuery(historyQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "historyQueries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setQueryFromLastHistoryQuery"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!NextQueriesConfig:interface",
          "docComment": "/**\n * Configuration options for the {@link NextQueriesXModule}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NextQueriesConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "NextQueriesConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!NextQueriesConfig#hideSessionQueries:member",
              "docComment": "/**\n * Hides the next queries if it has been already searched during the session.\n *\n * @example\n *\n * When set to true:\n * ```\n * query = 'shorts';\n * query = 'trousers';\n * suggestions = ['t-shirt', 'shorts', 'dress']\n * // Suggests ['t-shirt', 'dress']\n * ```\n *\n * @example\n *\n * When set to false:\n * ```\n * query = 'shorts';\n * query = 'trousers';\n * suggestions = ['t-shirt', 'shorts', 'dress']\n * // Suggests ['t-shirt', 'shorts', 'dress']\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hideSessionQueries: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hideSessionQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!NextQueriesConfig#itemsToRequest:member",
              "docComment": "/**\n * Number of next queries that will be requested.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemsToRequest: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemsToRequest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!NextQueriesConfig#loadOnInit:member",
              "docComment": "/**\n * Loads the next queries with the last searched query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadOnInit: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loadOnInit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!NextQueriesGetters:interface",
          "docComment": "/**\n * Next queries module getters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NextQueriesGetters "
            }
          ],
          "releaseTag": "Public",
          "name": "NextQueriesGetters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!NextQueriesGetters#nextQueries:member",
              "docComment": "/**\n * List of next queries that have not been searched before.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQuery",
                  "canonicalReference": "@empathy/search-types!NextQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nextQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!NextQueriesGetters#request:member",
              "docComment": "/**\n * Request object to retrieve the next queries using the search adapter, or null if there is not valid data to conform a valid request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "request: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQueriesRequest",
                  "canonicalReference": "@empathy/search-adapter!NextQueriesRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "request",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!nextQueriesModule:var",
          "docComment": "/**\n * The next queries wire factory.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "nextQueriesModule: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "NamespacedWireFactory",
              "canonicalReference": "@empathy/x-components!NamespacedWireFactory:interface"
            },
            {
              "kind": "Content",
              "text": "<\"nextQueries\">"
            }
          ],
          "releaseTag": "Public",
          "name": "nextQueriesModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!NextQueriesMutations:interface",
          "docComment": "/**\n * Next queries module mutations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NextQueriesMutations "
            }
          ],
          "releaseTag": "Public",
          "name": "NextQueriesMutations",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NextQueriesMutations#setNextQueries:member(1)",
              "docComment": "/**\n * Sets the next queries of the module.\n *\n * @param nextQueries - The new next queries to save to the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNextQueries(nextQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQuery",
                  "canonicalReference": "@empathy/search-types!NextQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nextQueries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setNextQueries"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NextQueriesMutations#setQuery:member(1)",
              "docComment": "/**\n * Sets the query of the module, which is used to retrieve the next-queries.\n *\n * @param newQuery - The new query to save to the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setQuery(newQuery: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newQuery",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setQuery"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!NextQueriesMutations#setSearchedQueries:member(1)",
              "docComment": "/**\n * Sets the searched queries of the module.\n *\n * @param searchedQueries - The searched queries to save to the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSearchedQueries(searchedQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "searchedQueries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setSearchedQueries"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!NextQueriesState:interface",
          "docComment": "/**\n * Next queries module state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NextQueriesState "
            }
          ],
          "releaseTag": "Public",
          "name": "NextQueriesState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!NextQueriesState#config:member",
              "docComment": "/**\n * Configuration options of the next queries module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQueriesConfig",
                  "canonicalReference": "@empathy/x-components!NextQueriesConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!NextQueriesState#nextQueries:member",
              "docComment": "/**\n * The list of the next queries, related to the `query` property of the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQuery",
                  "canonicalReference": "@empathy/search-types!NextQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nextQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!NextQueriesState#query:member",
              "docComment": "/**\n * The internal query of the module. Used to request the next queries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!NextQueriesState#searchedQueries:member",
              "docComment": "/**\n * The list of the searched queries, related to the `query` property of the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchedQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "searchedQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!NextQueriesXModule:type",
          "docComment": "/**\n * NextQueries {@link XModule} alias.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NextQueriesXModule = "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NextQueriesXStoreModule",
              "canonicalReference": "@empathy/x-components!NextQueriesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NextQueriesXModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!nextQueriesXModule:var",
          "docComment": "/**\n * Next queries {@link XModule} implementation. This module is auto-registered as soon as you import any component from the `next-queries` entry point.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "nextQueriesXModule: "
            },
            {
              "kind": "Reference",
              "text": "NextQueriesXModule",
              "canonicalReference": "@empathy/x-components!NextQueriesXModule:type"
            }
          ],
          "releaseTag": "Public",
          "name": "nextQueriesXModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!NextQueriesXStoreModule:type",
          "docComment": "/**\n * Next queries store module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NextQueriesXStoreModule = "
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NextQueriesState",
              "canonicalReference": "@empathy/x-components!NextQueriesState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "NextQueriesGetters",
              "canonicalReference": "@empathy/x-components!NextQueriesGetters:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "NextQueriesMutations",
              "canonicalReference": "@empathy/x-components!NextQueriesMutations:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "NextQueriesActions",
              "canonicalReference": "@empathy/x-components!NextQueriesActions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NextQueriesXStoreModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!NextQuery:class",
          "docComment": "/**\n * Renders a next query item which receives the suggestion that will be rendered as a prop. It exposes a default slot to change the next query content. If the slot is not overridden, it will render the suggestion query by default.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class NextQuery extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "NextQuery",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!NextQuery#events:member",
              "docComment": "/**\n * Events list which are going to be emitted when a next query is selected.\n *\n * @returns The {@link XEvent | XEvents} to emit.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get events(): "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!NextQuery#suggestion:member",
              "docComment": "/**\n * The suggestion to render and use in the default slot.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestion: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQueryModel",
                  "canonicalReference": "@empathy/search-types!NextQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!normalizeString:function(1)",
          "docComment": "/**\n * Trims the string, transforms it to lower case, and removes {@link https://en.wikipedia.org/wiki/Combining_Diacritical_Marks | combining diacritical marks} from it.\n *\n * @param string - The string to normalize.\n *\n * @returns The normalized version of the string.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function normalizeString(string: "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "string",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "normalizeString"
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!OpenButton:class",
          "docComment": "/**\n * Component containing an event button that emits {@link XEventsTypes.UserOpenedX} when clicked. It has a default slot to customize its content.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class OpenButton extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "OpenButton",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!Pair:type",
          "docComment": "/**\n * Represents a pair of values of the same type in an array.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Pair<Type> = "
            },
            {
              "kind": "Content",
              "text": "[Type, Type]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Pair",
          "typeParameters": [
            {
              "typeParameterName": "Type",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!PopularSearch:class",
          "docComment": "/**\n * Renders a popular search item which receives the suggestion that will be rendered as a prop. It exposes a default slot to change the popular search content. If the slot is not overridden, it will render the suggestion query by default.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class PopularSearch extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PopularSearch",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!PopularSearch#events:member",
              "docComment": "/**\n * Events list which are going to be emitted when a popular search is selected.\n *\n * @returns The {@link XEvent | XEvents} to emit.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get events(): "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!PopularSearch#suggestion:member",
              "docComment": "/**\n * The suggestion to render and use in the default slot.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestion: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!PopularSearches:class",
          "docComment": "/**\n * Simple popular-searches component that renders a list of suggestions, allowing the user to select one of them, and emitting the needed events. A popular search is just a query that has been searched a lot in a certain period and may optionally have associated a set of filters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class PopularSearches extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PopularSearches",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!PopularSearches#suggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!PopularSearchesActions:interface",
          "docComment": "/**\n * Popular searches module actions.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PopularSearchesActions "
            }
          ],
          "releaseTag": "Public",
          "name": "PopularSearchesActions",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!PopularSearchesActions#getAndSaveSuggestions:member(1)",
              "docComment": "/**\n * Gets a new set of suggestions and stores them in the module state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAndSaveSuggestions(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getAndSaveSuggestions"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!PopularSearchesActions#getSuggestions:member(1)",
              "docComment": "/**\n * Gets a new set of suggestions and returns them.\n *\n * @returns The new set of suggestions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSuggestions(): "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSuggestions"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!PopularSearchesConfig:interface",
          "docComment": "/**\n * Configuration options for the popular searches module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PopularSearchesConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "PopularSearchesConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!PopularSearchesConfig#maxItemsToRender:member",
              "docComment": "/**\n * Maximum number of popular searches to show.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxItemsToRender: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxItemsToRender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!PopularSearchesConfig#showExtraSuggestionWithoutFilter:member",
              "docComment": "/**\n * Show the extra suggestion that has filters without the filter.\n *\n * @example\n *\n * When set to true:\n * ```\n * query = 'trou';\n * suggestions = ['trousers in man', 'trousers in woman'];\n * // Suggests ['trousers', 'trousers in man', 'trousers in woman']\n * ```\n *\n * @example\n *\n * When set to false:\n * ```\n * query = 'trou';\n * suggestions = ['trousers in man', 'trousers in woman'];\n * // Suggests ['trousers in man', 'trousers in woman']\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showExtraSuggestionWithoutFilter: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showExtraSuggestionWithoutFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!PopularSearchesGetters:interface",
          "docComment": "/**\n * Popular searches module getters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PopularSearchesGetters "
            }
          ],
          "releaseTag": "Public",
          "name": "PopularSearchesGetters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!PopularSearchesGetters#request:member",
              "docComment": "/**\n * The request object to retrieve popular searches.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "request: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsRequest",
                  "canonicalReference": "@empathy/search-adapter!SuggestionsRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "request",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!PopularSearchesMutations:interface",
          "docComment": "/**\n * Popular searches module mutations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PopularSearchesMutations "
            }
          ],
          "releaseTag": "Public",
          "name": "PopularSearchesMutations",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!PopularSearchesMutations#setSuggestions:member(1)",
              "docComment": "/**\n * Sets the suggestions of the module.\n *\n * @param suggestions - The new suggestions list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSuggestions(suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setSuggestions"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!PopularSearchesState:interface",
          "docComment": "/**\n * Popular searches module state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PopularSearchesState "
            }
          ],
          "releaseTag": "Public",
          "name": "PopularSearchesState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!PopularSearchesState#config:member",
              "docComment": "/**\n * The popular searches module configuration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "PopularSearchesConfig",
                  "canonicalReference": "@empathy/x-components!PopularSearchesConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!PopularSearchesState#popularSearches:member",
              "docComment": "/**\n * The suggestions list. These suggestions represent the most searched queries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "popularSearches: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "popularSearches",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!PopularSearchesXModule:type",
          "docComment": "/**\n * PopularSearches {@link XModule} alias.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PopularSearchesXModule = "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PopularSearchesXStoreModule",
              "canonicalReference": "@empathy/x-components!PopularSearchesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PopularSearchesXModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!popularSearchesXModule:var",
          "docComment": "/**\n * Popular searches {@link XModule} implementation. This module is auto-registered as soon as you import any component from the `popular-searches` entry point.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "popularSearchesXModule: "
            },
            {
              "kind": "Reference",
              "text": "PopularSearchesXModule",
              "canonicalReference": "@empathy/x-components!PopularSearchesXModule:type"
            }
          ],
          "releaseTag": "Public",
          "name": "popularSearchesXModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!PopularSearchesXStoreModule:type",
          "docComment": "/**\n * Popular searches store module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PopularSearchesXStoreModule = "
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PopularSearchesState",
              "canonicalReference": "@empathy/x-components!PopularSearchesState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "PopularSearchesGetters",
              "canonicalReference": "@empathy/x-components!PopularSearchesGetters:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "PopularSearchesMutations",
              "canonicalReference": "@empathy/x-components!PopularSearchesMutations:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "PopularSearchesActions",
              "canonicalReference": "@empathy/x-components!PopularSearchesActions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PopularSearchesXStoreModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!Primitive:type",
          "docComment": "/**\n * TypeScript type primitives. Basically every type possible except objects or arrays.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Primitive = "
            },
            {
              "kind": "Content",
              "text": "string | number | boolean | undefined | null | symbol | "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@empathy/x-components!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Primitive",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!PropsWithType:type",
          "docComment": "/**\n * Extracts the name of the properties of an object that match a type.\n *\n * @param Type - The object type from whom extract the properties names.\n *\n * @param PropType - The type of the properties to select.\n *\n * @example\n * ```typescript\n *   interface Person {\n *   name: string,\n *   surname: string,\n *   age: number\n * }\n *\n *  type StringPersonProperties = PropsWithType<Person, string>; // \"name\" | \"surname\";\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PropsWithType<Type, PropType> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [Key in keyof Type]: Type[Key] extends PropType ? Key : never;\n}[keyof Type]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PropsWithType",
          "typeParameters": [
            {
              "typeParameterName": "Type",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "PropType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!QuerySuggestion:class",
          "docComment": "/**\n * Simple query-suggestion component that renders a suggestion.\n *\n * @remarks\n *\n * A query suggestion is just a query that contains the user query, and that can have associated a set of filters. I.e. If you are searching for `shirt`, a query suggestion could be `long sleeve shirt`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class QuerySuggestion extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "QuerySuggestion",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!QuerySuggestion#query:member",
              "docComment": "/**\n * The query-suggestions module query. TODO: This should be the normalized query obtained from a getter instead of the state.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!QuerySuggestion#suggestion:member",
              "docComment": "/**\n * The suggestion to render.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestion: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!QuerySuggestions:class",
          "docComment": "/**\n * Simple query-suggestions component that renders a list of query suggestions.\n *\n * @remarks\n *\n * A query suggestion is just a query that contains the user query, and that can have associated a set of filters. I.e. If you are searching for `shirt`, a query suggestion could be `long sleeve shirt`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class QuerySuggestions extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "QuerySuggestions",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!QuerySuggestions#suggestions:member",
              "docComment": "/**\n * The module's list of suggestions.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!QuerySuggestionsActions:interface",
          "docComment": "/**\n * QuerySuggestions store actions.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface QuerySuggestionsActions "
            }
          ],
          "releaseTag": "Public",
          "name": "QuerySuggestionsActions",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsActions#getAndSaveSuggestions:member(1)",
              "docComment": "/**\n * Requests and saves to the state a list of suggestions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAndSaveSuggestions(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getAndSaveSuggestions"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsActions#getSuggestions:member(1)",
              "docComment": "/**\n * Requests and returns a list of suggestions based on the module state.\n *\n * @returns A new list of suggestions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSuggestions(): "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSuggestions"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!QuerySuggestionsConfig:interface",
          "docComment": "/**\n * Configuration options for the {@link QuerySuggestionsXModule}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface QuerySuggestionsConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "QuerySuggestionsConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsConfig#debounceInMs:member",
              "docComment": "/**\n * Debounce time measured in milliseconds used to store the query suggestions module query while the user is typing a query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debounceInMs: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "debounceInMs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsConfig#hideIfEqualsQuery:member",
              "docComment": "/**\n * Hides the suggestion if it is equal to the current query.\n *\n * @example\n *\n * When set to true:\n * ```\n * query = 'trousers';\n * suggestions = ['trousers', 'trousers skinny', 'trousers straight']\n * // Suggests ['trousers skinny', 'trousers straight']\n * ```\n *\n * @example\n *\n * When set to false:\n * ```\n * query = 'trousers';\n * suggestions = ['trousers', 'trousers skinny', 'trousers straight']\n * // Suggests ['trousers', 'trousers skinny', 'trousers straight']\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hideIfEqualsQuery: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hideIfEqualsQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsConfig#maxItemsToRequest:member",
              "docComment": "/**\n * Maximum number of query suggestions to request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxItemsToRequest: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxItemsToRequest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsConfig#showExtraSuggestionWithoutFilter:member",
              "docComment": "/**\n * Show the extra suggestion that has filters without the filter.\n *\n * @remarks\n *\n * Remember this property might be affected by {@link QuerySuggestionsConfig.hideIfEqualsQuery}\n *\n * @example\n *\n * When set to true:\n * ```\n * query = 'trou';\n * suggestions = ['trousers in man', 'trousers in woman'];\n * // Suggests ['trousers', 'trousers in man', 'trousers in woman']\n * ```\n *\n * @example\n *\n * When set to false:\n * ```\n * query = 'trou';\n * suggestions = ['trousers in man', 'trousers in woman'];\n * // Suggests ['trousers in man', 'trousers in woman']\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showExtraSuggestionWithoutFilter: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showExtraSuggestionWithoutFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!QuerySuggestionsGetters:interface",
          "docComment": "/**\n * QuerySuggestions store getters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface QuerySuggestionsGetters "
            }
          ],
          "releaseTag": "Public",
          "name": "QuerySuggestionsGetters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsGetters#normalizedQuery:member",
              "docComment": "/**\n * The normalized modules query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalizedQuery: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "normalizedQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsGetters#request:member",
              "docComment": "/**\n * The adapter request object for retrieving the query suggestions, or null if there is not valid data to create a request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "request: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsRequest",
                  "canonicalReference": "@empathy/search-adapter!SuggestionsRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "request",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!querySuggestionsModule:var",
          "docComment": "/**\n * QuerySuggestions wires factory.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "querySuggestionsModule: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "NamespacedWireFactory",
              "canonicalReference": "@empathy/x-components!NamespacedWireFactory:interface"
            },
            {
              "kind": "Content",
              "text": "<\"querySuggestions\">"
            }
          ],
          "releaseTag": "Public",
          "name": "querySuggestionsModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!QuerySuggestionsMutations:interface",
          "docComment": "/**\n * QuerySuggestions store mutations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface QuerySuggestionsMutations "
            }
          ],
          "releaseTag": "Public",
          "name": "QuerySuggestionsMutations",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsMutations#setQuery:member(1)",
              "docComment": "/**\n * Sets the query of the query suggestions module.\n *\n * @param newQuery - The new query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setQuery(newQuery: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newQuery",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setQuery"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsMutations#setSuggestions:member(1)",
              "docComment": "/**\n * Sets the suggestions of the module.\n *\n * @param suggestions - The suggestions list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSuggestions(suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setSuggestions"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!QuerySuggestionsState:interface",
          "docComment": "/**\n * QuerySuggestions store state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface QuerySuggestionsState "
            }
          ],
          "releaseTag": "Public",
          "name": "QuerySuggestionsState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsState#config:member",
              "docComment": "/**\n * The configuration of the query suggestions module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "QuerySuggestionsConfig",
                  "canonicalReference": "@empathy/x-components!QuerySuggestionsConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsState#query:member",
              "docComment": "/**\n * The query of the query suggestions module. Used to request the suggestions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsState#suggestions:member",
              "docComment": "/**\n * The suggestions for the query of the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!QuerySuggestionsXModule:type",
          "docComment": "/**\n * QuerySuggestions {@link XModule} alias.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type QuerySuggestionsXModule = "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "QuerySuggestionsXStoreModule",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "QuerySuggestionsXModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!querySuggestionsXModule:var",
          "docComment": "/**\n * QuerySuggestions {@link XModule} implementation. This module is auto-registered as soon as you import any component from the `query-suggestions` entry point.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "querySuggestionsXModule: "
            },
            {
              "kind": "Reference",
              "text": "QuerySuggestionsXModule",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsXModule:type"
            }
          ],
          "releaseTag": "Public",
          "name": "querySuggestionsXModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!QuerySuggestionsXStoreModule:type",
          "docComment": "/**\n * QuerySuggestions type safe store module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type QuerySuggestionsXStoreModule = "
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "QuerySuggestionsState",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "QuerySuggestionsGetters",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsGetters:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "QuerySuggestionsMutations",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsMutations:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "QuerySuggestionsActions",
              "canonicalReference": "@empathy/x-components!QuerySuggestionsActions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "QuerySuggestionsXStoreModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!reduce:function(1)",
          "docComment": "/**\n * Iterates through the obj properties calling the reducer function.\n *\n * @param obj - The object to iterate through each property.\n *\n * @param reducer - A function that will be called for each property, modifying the initialValue object.\n *\n * @param initialValue - The initial value of the accumulator property of the reducer function.\n *\n * @returns Result of the reducer function.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reduce<T extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", V>(obj: "
            },
            {
              "kind": "Content",
              "text": "T | undefined | null"
            },
            {
              "kind": "Content",
              "text": ", reducer: "
            },
            {
              "kind": "Content",
              "text": "(accumulator: V, key: keyof T, value: "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<T[keyof T], undefined>, index: number) => V"
            },
            {
              "kind": "Content",
              "text": ", initialValue: "
            },
            {
              "kind": "Content",
              "text": "V"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "V"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "reducer",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              }
            },
            {
              "parameterName": "initialValue",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "reduce"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!refreshHistoryQueriesSession:var",
          "docComment": "/**\n * Triggers a session refresh, extending its validity for the time configured in the {@link HistoryQueriesConfig.sessionTTLInMs}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "refreshHistoryQueriesSession: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            }
          ],
          "releaseTag": "Public",
          "name": "refreshHistoryQueriesSession",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!refreshSession:var",
          "docComment": "/**\n * Default implementation for the {@link HistoryQueriesActions.refreshSession}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions, provided by Vuex.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "refreshSession: "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesXStoreModule",
              "canonicalReference": "@empathy/x-components!HistoryQueriesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "['actions']['refreshSession']"
            }
          ],
          "releaseTag": "Public",
          "name": "refreshSession",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!RelatedTags:class",
          "docComment": "/**\n * Simple related-tags component that renders a list of related tags.\n *\n * @remarks\n *\n * A related tag is just a tag related with the previous query refining it. I.e. If you are searching for `lego`, a related tag could be `city` and this refine the search with this new tag, 'lego city'.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class RelatedTags extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedTags",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!RelatedTagsActions:interface",
          "docComment": "/**\n * RelatedTags store actions.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RelatedTagsActions "
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedTagsActions",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!RelatedTagsConfig:interface",
          "docComment": "/**\n * Configuration options for the {@link RelatedTagsXModule}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RelatedTagsConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedTagsConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsConfig#maxItemsToRequest:member",
              "docComment": "/**\n * Maximum number of related tags to request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxItemsToRequest: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxItemsToRequest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!RelatedTagsGetters:interface",
          "docComment": "/**\n * RelatedTags store getters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RelatedTagsGetters "
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedTagsGetters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsGetters#relatedTags:member",
              "docComment": "/**\n * List that contains al the related tags, having the selected ones at the first positions (if there are any), and then the unselected ones.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "relatedTags: "
                },
                {
                  "kind": "Reference",
                  "text": "RelatedTag",
                  "canonicalReference": "@empathy/search-types!RelatedTag:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "relatedTags",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsGetters#request:member",
              "docComment": "/**\n * The adapter request object for retrieving the related tags, or null if there is not valid data to create a request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "request: "
                },
                {
                  "kind": "Reference",
                  "text": "RelatedTagsRequest",
                  "canonicalReference": "@empathy/search-adapter!RelatedTagsRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "request",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!RelatedTagsMutations:interface",
          "docComment": "/**\n * RelatedTags store mutations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RelatedTagsMutations "
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedTagsMutations",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsMutations#setQuery:member(1)",
              "docComment": "/**\n * Sets the query of the module, which is used to retrieve the related tags.\n *\n * @param newQuery - The new query to save to the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setQuery(newQuery: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newQuery",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setQuery"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsMutations#setRelatedTags:member(1)",
              "docComment": "/**\n * Sets the related tags of the module.\n *\n * @param relatedTags - The new related tags to save to the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRelatedTags(relatedTags: "
                },
                {
                  "kind": "Reference",
                  "text": "RelatedTag",
                  "canonicalReference": "@empathy/search-types!RelatedTag:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "relatedTags",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setRelatedTags"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsMutations#setSelectedRelatedTags:member(1)",
              "docComment": "/**\n * Sets the selected related tags of the module.\n *\n * @param selectedRelatedTags - The selected related tags to save to the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelectedRelatedTags(selectedRelatedTags: "
                },
                {
                  "kind": "Reference",
                  "text": "RelatedTag",
                  "canonicalReference": "@empathy/search-types!RelatedTag:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "selectedRelatedTags",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setSelectedRelatedTags"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!RelatedTagsState:interface",
          "docComment": "/**\n * RelatedTags store state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RelatedTagsState "
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedTagsState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsState#config:member",
              "docComment": "/**\n * The configuration of the related tags module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "RelatedTagsConfig",
                  "canonicalReference": "@empathy/x-components!RelatedTagsConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsState#query:member",
              "docComment": "/**\n * The internal query of the module. Used to request the related tags.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsState#relatedTags:member",
              "docComment": "/**\n * The list of the related tags, related to the `query` property of the state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "relatedTags: "
                },
                {
                  "kind": "Reference",
                  "text": "RelatedTag",
                  "canonicalReference": "@empathy/search-types!RelatedTag:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "relatedTags",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!RelatedTagsState#selectedRelatedTags:member",
              "docComment": "/**\n * The list of the selected related tags.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedRelatedTags: "
                },
                {
                  "kind": "Reference",
                  "text": "RelatedTag",
                  "canonicalReference": "@empathy/search-types!RelatedTag:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedRelatedTags",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!RelatedTagsXModule:type",
          "docComment": "/**\n * RelatedTags {@link XModule} alias.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RelatedTagsXModule = "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RelatedTagsXStoreModule",
              "canonicalReference": "@empathy/x-components!RelatedTagsXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedTagsXModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!relatedTagsXModule:var",
          "docComment": "/**\n * RelatedTags {@link XModule} implementation. This module is auto-registered as soon as you import any component from the `related-tags` entry point.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "relatedTagsXModule: "
            },
            {
              "kind": "Reference",
              "text": "RelatedTagsXModule",
              "canonicalReference": "@empathy/x-components!RelatedTagsXModule:type"
            }
          ],
          "releaseTag": "Public",
          "name": "relatedTagsXModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!RelatedTagsXStoreModule:type",
          "docComment": "/**\n * RelatedTags type safe store module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RelatedTagsXStoreModule = "
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RelatedTagsState",
              "canonicalReference": "@empathy/x-components!RelatedTagsState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "RelatedTagsGetters",
              "canonicalReference": "@empathy/x-components!RelatedTagsGetters:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "RelatedTagsMutations",
              "canonicalReference": "@empathy/x-components!RelatedTagsMutations:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "RelatedTagsActions",
              "canonicalReference": "@empathy/x-components!RelatedTagsActions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RelatedTagsXStoreModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!removeFromHistory:var",
          "docComment": "/**\n * Default implementation for the {@link HistoryQueriesActions.removeFromHistory}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions, provided by Vuex.\n *\n * @param historyQueryToRemove - The `HistoryQuery` to remove from the history.\n *\n * @returns A `void` promise that resolves when the history queries finishes updating.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "removeFromHistory: "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesXStoreModule",
              "canonicalReference": "@empathy/x-components!HistoryQueriesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "['actions']['removeFromHistory']"
            }
          ],
          "releaseTag": "Public",
          "name": "removeFromHistory",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!RemoveHistoryQuery:class",
          "docComment": "/**\n * Button that when it is pressed emits the {@link XEventsTypes.UserPressedRemoveHistoryQuery} event, expressing the user intention to remove a query in the history.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class RemoveHistoryQuery extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RemoveHistoryQuery",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!RemoveHistoryQuery#historyQuery:member",
              "docComment": "/**\n * The historyQuery that will be removed when clicking the clear button.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected historyQuery: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "historyQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!RemoveHistoryQuery#removeHistoryQueryEvent:member",
              "docComment": "/**\n * The event handler that will be triggered when clicking on the clear history query button.\n *\n * @remarks\n *\n * * {@link XEventsTypes.UserPressedRemoveHistoryQuery}: historyQuery\n *\n * @returns The {@link XEvent | XEvents} to emit.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get removeHistoryQueryEvent(): "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeHistoryQueryEvent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!removeHistoryQuery:var",
          "docComment": "/**\n * Removes a single history query from the history queries.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "removeHistoryQuery: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"@empathy/search-types\")."
            },
            {
              "kind": "Reference",
              "text": "HistoryQuery",
              "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "removeHistoryQuery",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!Returns:type",
          "docComment": "/**\n * Extracts the return type of each property of the T object.\n *\n * @param T - The dictionary of functions to extract its return type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Returns<T extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@empathy/x-components!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof T]: "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<T[K]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Returns",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 6,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!RootXStoreState:interface",
          "docComment": "/**\n * Base X store state type. All {@link XStoreModule} are nested under the `x` module for safe scoping.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RootXStoreState "
            }
          ],
          "releaseTag": "Public",
          "name": "RootXStoreState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!RootXStoreState#x:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [Module in "
                },
                {
                  "kind": "Reference",
                  "text": "XModuleName",
                  "canonicalReference": "@empathy/x-components!XModuleName:type"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractState",
                  "canonicalReference": "@empathy/x-components!ExtractState:type"
                },
                {
                  "kind": "Content",
                  "text": "<Module>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!sanitize:var",
          "docComment": "/**\n * Sanitize characters from a given string.\n *\n * @param str - The string to remove unwanted characters.\n *\n * @returns The string without the unwanted characters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "sanitize: "
            },
            {
              "kind": "Content",
              "text": "(str: string) => string"
            }
          ],
          "releaseTag": "Public",
          "name": "sanitize",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!SearchBoxActions:interface",
          "docComment": "/**\n * SearchBox store actions.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SearchBoxActions "
            }
          ],
          "releaseTag": "Public",
          "name": "SearchBoxActions",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!SearchBoxConfig:interface",
          "docComment": "/**\n * Search box x-module configuration.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SearchBoxConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "SearchBoxConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!SearchBoxConfig#autocomplete:member",
              "docComment": "/**\n * Autocomplete suggestion configuration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autocomplete: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        keyboardKeys: string[];\n        suggestionsEvent: "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "autocomplete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!SearchBoxConfig#autofocus:member",
              "docComment": "/**\n * Allow input autofocus when the search box has been rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autofocus: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "autofocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!SearchBoxConfig#maxLength:member",
              "docComment": "/**\n * Max characters number allowed in the input search.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!SearchBoxGetters:interface",
          "docComment": "/**\n * SearchBox store getters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SearchBoxGetters "
            }
          ],
          "releaseTag": "Public",
          "name": "SearchBoxGetters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!SearchBoxGetters#trimmedQuery:member",
              "docComment": "/**\n * The query without initial or ending spaces.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trimmedQuery: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "trimmedQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!SearchBoxMutations:interface",
          "docComment": "/**\n * SearchBox store mutations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SearchBoxMutations "
            }
          ],
          "releaseTag": "Public",
          "name": "SearchBoxMutations",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!SearchBoxMutations#setQuery:member(1)",
              "docComment": "/**\n * Sets the new query of the search-box.\n *\n * @param newQuery - The new query of the search-box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setQuery(newQuery: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newQuery",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setQuery"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!SearchBoxState:interface",
          "docComment": "/**\n * SearchBox store state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SearchBoxState "
            }
          ],
          "releaseTag": "Public",
          "name": "SearchBoxState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!SearchBoxState#config:member",
              "docComment": "/**\n * The shared configuration of the search-box module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "SearchBoxConfig",
                  "canonicalReference": "@empathy/x-components!SearchBoxConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!SearchBoxState#query:member",
              "docComment": "/**\n * The query of the search box input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!SearchBoxXModule:type",
          "docComment": "/**\n * SearchBox {@link XModule} alias.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SearchBoxXModule = "
            },
            {
              "kind": "Reference",
              "text": "XModule",
              "canonicalReference": "@empathy/x-components!XModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SearchBoxXStoreModule",
              "canonicalReference": "@empathy/x-components!SearchBoxXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SearchBoxXModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!searchBoxXModule:var",
          "docComment": "/**\n * SearchBox {@link XModule} implementation. This module is auto-registered as soon as you import any component from the `search-box` entry point.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "searchBoxXModule: "
            },
            {
              "kind": "Reference",
              "text": "SearchBoxXModule",
              "canonicalReference": "@empathy/x-components!SearchBoxXModule:type"
            }
          ],
          "releaseTag": "Public",
          "name": "searchBoxXModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!SearchBoxXStoreModule:type",
          "docComment": "/**\n * SearchBox type safe store module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SearchBoxXStoreModule = "
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SearchBoxState",
              "canonicalReference": "@empathy/x-components!SearchBoxState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SearchBoxGetters",
              "canonicalReference": "@empathy/x-components!SearchBoxGetters:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SearchBoxMutations",
              "canonicalReference": "@empathy/x-components!SearchBoxMutations:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "SearchBoxActions",
              "canonicalReference": "@empathy/x-components!SearchBoxActions:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SearchBoxXStoreModule",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!SearchButton:class",
          "docComment": "/**\n * Search button component which emits on its click {@link XEventsTypes.UserAcceptedAQuery} and {@link XEventsTypes.UserPressedSearchButton} events with the query as payload while there is query. If the query is empty, the component won't emit any event. The component has also a dynamic class to flag the HTML button when the query is empty (to hide the button when the query is empty for instance).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class SearchButton extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SearchButton",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!SearchButton#dynamicClasses:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get dynamicClasses(): "
                },
                {
                  "kind": "Reference",
                  "text": "VueCSSClasses",
                  "canonicalReference": "@empathy/x-components!VueCSSClasses:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dynamicClasses",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!SearchButton#events:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get events(): "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!SearchButton#isQueryEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get isQueryEmpty(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isQueryEmpty",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!SearchButton#query:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!SearchInput:class",
          "docComment": "/**\n * Search input that reacts to user interaction emitting events.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class SearchInput extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SearchInput",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!SearchInput#$refs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$refs: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        input: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "$refs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!SearchInput#config:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "SearchBoxConfig",
                  "canonicalReference": "@empathy/x-components!SearchBoxConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!SearchInput#query:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "query",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!sessionHistoryQueries:var",
          "docComment": "/**\n * Default implementation for the {@link HistoryQueriesGetters.sessionHistoryQueries} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the history queries module.\n *\n * @returns The history queries that have been made in the current session.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "sessionHistoryQueries: "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesXStoreModule",
              "canonicalReference": "@empathy/x-components!HistoryQueriesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "['getters']['sessionHistoryQueries']"
            }
          ],
          "releaseTag": "Public",
          "name": "sessionHistoryQueries",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!setHistoryQueries:var",
          "docComment": "/**\n * Default implementation for the {@link HistoryQueriesActions.setHistoryQueries}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions, provided by Vuex.\n *\n * @param historyQueries - The new history queries to save to the store and browser storage.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "setHistoryQueries: "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesXStoreModule",
              "canonicalReference": "@empathy/x-components!HistoryQueriesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "['actions']['setHistoryQueries']"
            }
          ],
          "releaseTag": "Public",
          "name": "setHistoryQueries",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!setHistoryQueriesQuery:var",
          "docComment": "/**\n * Sets the query of the history queries module. Used for searching into the history queries.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "setHistoryQueriesQuery: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<string>"
            }
          ],
          "releaseTag": "Public",
          "name": "setHistoryQueriesQuery",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!setNextQueriesQuery:var",
          "docComment": "/**\n * Sets the next queries state `query`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "setNextQueriesQuery: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<string>"
            }
          ],
          "releaseTag": "Public",
          "name": "setNextQueriesQuery",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!setQueryFromLastHistoryQuery:var",
          "docComment": "/**\n * Sets the next queries state `query` with the last query in history queries.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "setQueryFromLastHistoryQuery: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"@empathy/search-types\")."
            },
            {
              "kind": "Reference",
              "text": "HistoryQuery",
              "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
            },
            {
              "kind": "Content",
              "text": "[]>"
            }
          ],
          "releaseTag": "Public",
          "name": "setQueryFromLastHistoryQuery",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!setQuerySuggestionsQuery:var",
          "docComment": "/**\n * Sets the query-suggestions module query.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "setQuerySuggestionsQuery: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<string>"
            }
          ],
          "releaseTag": "Public",
          "name": "setQuerySuggestionsQuery",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!setSearchedQueries:var",
          "docComment": "/**\n * Sets the next queries state `searchedQueries` with the list of history queries.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "setSearchedQueries: "
            },
            {
              "kind": "Content",
              "text": "import(\"../..\")."
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"@empathy/search-types\")."
            },
            {
              "kind": "Reference",
              "text": "HistoryQuery",
              "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
            },
            {
              "kind": "Content",
              "text": "[]>"
            }
          ],
          "releaseTag": "Public",
          "name": "setSearchedQueries",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!SimpleStateSelector:type",
          "docComment": "/**\n * Selects a part of the store state or getters (AKA \"getter\" inside {@link https://vuex.vuejs.org/ | Vuex} watchers).\n *\n * @param ReturnType - The type of the state or getters property selected.\n *\n * @param State - The type of the state of the {@link XModule} where this selector is used.\n *\n * @param Getters - The type of the getters of the {@link XModule} where this selector is used.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SimpleStateSelector<ReturnType, State extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", Getters extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(state: State, getters: Getters) => ReturnType"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SimpleStateSelector",
          "typeParameters": [
            {
              "typeParameterName": "ReturnType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Getters",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!State:function(1)",
          "docComment": "/**\n * Generates a computed property which returns the selected state.\n *\n * The decorated property needs to be public for type inference to work.\n *\n * @param module - The {@link XModuleName} of the getter.\n *\n * @param path - The state path.\n *\n * @returns Decorator with the state properties of the module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function State<Module extends "
            },
            {
              "kind": "Reference",
              "text": "XModuleName",
              "canonicalReference": "@empathy/x-components!XModuleName:type"
            },
            {
              "kind": "Content",
              "text": ", Path extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "ExtractState",
              "canonicalReference": "@empathy/x-components!ExtractState:type"
            },
            {
              "kind": "Content",
              "text": "<Module>"
            },
            {
              "kind": "Content",
              "text": ">(module: "
            },
            {
              "kind": "Content",
              "text": "Module"
            },
            {
              "kind": "Content",
              "text": ", path: "
            },
            {
              "kind": "Content",
              "text": "Path"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DecoratorFor",
              "canonicalReference": "@empathy/x-components!DecoratorFor:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExtractState",
              "canonicalReference": "@empathy/x-components!ExtractState:type"
            },
            {
              "kind": "Content",
              "text": "<Module>[Path]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "module",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Path",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "State"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!StateSelector:interface",
          "docComment": "/**\n * Composition type of {@link SimpleStateSelector} which allows to indicate if the state selector should be executed in first instance (first assignment of values). Selector is the {@link SimpleStateSelector} and immediate flags if the selector should be executed when it is initialized for first time.\n *\n * @param ReturnType - The type of the state or getters property selected.\n *\n * @param State - The type of the state of the {@link XModule} where this selector is used.\n *\n * @param Getters - The type of the getters of the {@link XModule} where this selector is used.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StateSelector<ReturnType, State extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", Getters extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "WatchOptions",
              "canonicalReference": "vue!WatchOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ReturnType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Getters",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "StateSelector",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!StateSelector#selector:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selector: "
                },
                {
                  "kind": "Reference",
                  "text": "SimpleStateSelector",
                  "canonicalReference": "@empathy/x-components!SimpleStateSelector:type"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnType, State, Getters>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selector",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 5,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@empathy/x-components!storageKey:var",
          "docComment": "/**\n * Default implementation for the {@link HistoryQueriesGetters.storageKey} getter.\n *\n * @returns The key for retrieving and saving the history queries int the browser storage.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "storageKey: "
            },
            {
              "kind": "Reference",
              "text": "HistoryQueriesXStoreModule",
              "canonicalReference": "@empathy/x-components!HistoryQueriesXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "['getters']['storageKey']"
            }
          ],
          "releaseTag": "Public",
          "name": "storageKey",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!StoreEmitters:type",
          "docComment": "/**\n * Dictionary where the key is a {@link XEvent}, and the value is {@link SimpleStateSelector} or {@link StateSelector}. This {@link SimpleStateSelector} or {@link StateSelector} can only access the state and getters from the {@link XStoreModule} passed as param type. This dictionary is used to emits a {@link XEvent} when the part of the store selected by {@link SimpleStateSelector} changes.\n *\n * @param StoreModule - The store module that these store emitters will be able to access.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StoreEmitters<StoreModule extends "
            },
            {
              "kind": "Reference",
              "text": "AnyXStoreModule",
              "canonicalReference": "@empathy/x-components!AnyXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [Event in "
            },
            {
              "kind": "Reference",
              "text": "XEvent",
              "canonicalReference": "@empathy/x-components!XEvent:type"
            },
            {
              "kind": "Content",
              "text": "]?: "
            },
            {
              "kind": "Reference",
              "text": "SimpleStateSelector",
              "canonicalReference": "@empathy/x-components!SimpleStateSelector:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XEventPayload",
              "canonicalReference": "@empathy/x-components!XEventPayload:type"
            },
            {
              "kind": "Content",
              "text": "<Event>, "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<StoreModule['state']>, "
            },
            {
              "kind": "Reference",
              "text": "Returns",
              "canonicalReference": "@empathy/x-components!Returns:type"
            },
            {
              "kind": "Content",
              "text": "<StoreModule['getters']>> | "
            },
            {
              "kind": "Reference",
              "text": "StateSelector",
              "canonicalReference": "@empathy/x-components!StateSelector:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XEventPayload",
              "canonicalReference": "@empathy/x-components!XEventPayload:type"
            },
            {
              "kind": "Content",
              "text": "<Event>, "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<StoreModule['state']>, "
            },
            {
              "kind": "Reference",
              "text": "Returns",
              "canonicalReference": "@empathy/x-components!Returns:type"
            },
            {
              "kind": "Content",
              "text": "<StoreModule['getters']>>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StoreEmitters",
          "typeParameters": [
            {
              "typeParameterName": "StoreModule",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 22
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!VueCSSClasses:type",
          "docComment": "/**\n * Union type containing supported Vue dynamic classes.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type VueCSSClasses = "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": "<boolean> | (string | "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": "<boolean>)[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "VueCSSClasses",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!Wire:type",
          "docComment": "/**\n * A Wire is a function that receives an observable, the store, and returns a subscription.\n *\n * @param PayloadType - The observable payload type, or any if it accepts anything.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Wire<PayloadType> = "
            },
            {
              "kind": "Content",
              "text": "(observable: "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WirePayload",
              "canonicalReference": "@empathy/x-components!WirePayload:interface"
            },
            {
              "kind": "Content",
              "text": "<PayloadType>>, store: "
            },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "vuex!Store:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RootXStoreState",
              "canonicalReference": "@empathy/x-components!RootXStoreState:interface"
            },
            {
              "kind": "Content",
              "text": ">) => "
            },
            {
              "kind": "Reference",
              "text": "Subscription",
              "canonicalReference": "rxjs!Subscription:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Wire",
          "typeParameters": [
            {
              "typeParameterName": "PayloadType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!wireCommit:function(1)",
          "docComment": "/**\n * Creates a wire that commits a mutation to the store. This wire receives a function. This function is used to get the actual payload value passed to mutation. This wire can be used in every event, as it does not have a payload type associated.\n *\n * @param mutation - The full mutation path to commit. I.e. `x/search/setQuery`.\n *\n * @param payloadFactory - A function that receives the an object with the Store state and getters as parameter.\n *\n * @returns A {@link AnyWire} wire that commits the mutation with the payload returned by the payloadFactory.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wireCommit(mutation: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", payloadFactory: "
            },
            {
              "kind": "Content",
              "text": "(params: "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "vuex!Store:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RootXStoreState",
              "canonicalReference": "@empathy/x-components!RootXStoreState:interface"
            },
            {
              "kind": "Content",
              "text": ">, 'state' | 'getters'>) => any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AnyWire",
              "canonicalReference": "@empathy/x-components!AnyWire:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mutation",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "payloadFactory",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 10
              }
            }
          ],
          "name": "wireCommit"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!wireCommit:function(2)",
          "docComment": "/**\n * Creates a wire that commits a mutation to the store. This wire can receive any value as payload. This wire can be used in every event, as it does not have a payload type associated.\n *\n * @param mutation - The full mutation path to commit. I.e. `x/search/setQuery`.\n *\n * @param staticPayload - A static payload to pass to the mutation.\n *\n * @returns {@link AnyWire} A wire that commits the mutation with the staticPayload payload.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wireCommit(mutation: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", staticPayload: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AnyWire",
              "canonicalReference": "@empathy/x-components!AnyWire:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "mutation",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "staticPayload",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "wireCommit"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!wireCommit:function(3)",
          "docComment": "/**\n * Creates a wire that commits a mutation to the store. This wire will commit to the store the payload that it receives in the observable.\n *\n * @param mutation - The full mutation path to commit. I.e. `x/search/setQuery`.\n *\n * @typeParam Payload - The type of the payload that this wire will receive\n *\n * @returns {@link Wire} A wire that commits the mutation with the payload that it receives in the observable.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wireCommit<Payload>(mutation: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<Payload>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "mutation",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Payload",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "wireCommit"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!wireCommitWithoutPayload:function(1)",
          "docComment": "/**\n * Creates a wire that commits a mutation to the store, but without any payload. This wire can be used in every event, as it does not have a payload type associated.\n *\n * @param mutation - The full mutation path to commit. I.e. `x/search/setQuery`.\n *\n * @returns {@link AnyWire} A wire that commits the mutation without any payload.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wireCommitWithoutPayload(mutation: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AnyWire",
              "canonicalReference": "@empathy/x-components!AnyWire:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mutation",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "wireCommitWithoutPayload"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!wireDispatch:function(1)",
          "docComment": "/**\n * Creates a wire that dispatches an action to the store. This wire can be used in every event, as it does not have a payload type associated.\n *\n * @param action - The full action path to commit. I.e. `x/query-suggestions/getSuggestions`.\n *\n * @param staticPayload - A static payload to pass to the action which will be dispatched.\n *\n * @returns {@link AnyWire} A wire that dispatches the action with the staticPayload payload.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wireDispatch(action: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", staticPayload: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AnyWire",
              "canonicalReference": "@empathy/x-components!AnyWire:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "action",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "staticPayload",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "wireDispatch"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!wireDispatch:function(2)",
          "docComment": "/**\n * Creates a wire that dispatches an action to the store. This wire will pass the payload received in the observable to the action.\n *\n * @param action - The full action path to commit. I.e. `x/query-suggestions/getSuggestions`.\n *\n * @typeParam Payload - the type of the payload that this wire will receive\n *\n * @returns {@link Wire} A wire that dispatches the action with the payload that it receives in the observable.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wireDispatch<Payload>(action: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<Payload>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "action",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Payload",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "wireDispatch"
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!wireDispatchWithoutPayload:function(1)",
          "docComment": "/**\n * Creates a wire that dispatches an action to the store, but without any payload. This wire can be used in every event, as it does not have a payload type associated.\n *\n * @param action - The full action path to commit. I.e. `x/query-suggestions/getSuggestions`.\n *\n * @returns {@link AnyWire} A wire that dispatches the action without any payload.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wireDispatchWithoutPayload(action: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AnyWire",
              "canonicalReference": "@empathy/x-components!AnyWire:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "action",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "wireDispatchWithoutPayload"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!WireForEvent:type",
          "docComment": "/**\n * Alias for a wire with the type of the event payload.\n *\n * @param Event - The event name.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type WireForEvent<Event extends "
            },
            {
              "kind": "Reference",
              "text": "XEvent",
              "canonicalReference": "@empathy/x-components!XEvent:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Wire",
              "canonicalReference": "@empathy/x-components!Wire:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XEventPayload",
              "canonicalReference": "@empathy/x-components!XEventPayload:type"
            },
            {
              "kind": "Content",
              "text": "<Event>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WireForEvent",
          "typeParameters": [
            {
              "typeParameterName": "Event",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!WireMetadata:interface",
          "docComment": "/**\n * The wires metadata includes more information about the emitted event, so then these events can be processed with more precision if needed.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WireMetadata "
            }
          ],
          "releaseTag": "Public",
          "name": "WireMetadata",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!WireMetadata#moduleName:member",
              "docComment": "/**\n * The {@link XModule} name that emitted the event or `null` if it has been emitted from an unknown module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moduleName: "
                },
                {
                  "kind": "Reference",
                  "text": "XModuleName",
                  "canonicalReference": "@empathy/x-components!XModuleName:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "moduleName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!WireMetadata#target:member",
              "docComment": "/**\n * The DOM element that triggered the event emission.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!WireParams:interface",
          "docComment": "/**\n * Groups the payload, metadata, and the store into an object to avoid having multiple parameters.\n *\n * @typeParam Payload - The payload type of the wire\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WireParams<Payload> extends "
            },
            {
              "kind": "Reference",
              "text": "WirePayload",
              "canonicalReference": "@empathy/x-components!WirePayload:interface"
            },
            {
              "kind": "Content",
              "text": "<Payload> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Payload",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "WireParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!WireParams#store:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "store: "
                },
                {
                  "kind": "Reference",
                  "text": "Store",
                  "canonicalReference": "vuex!Store:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RootXStoreState",
                  "canonicalReference": "@empathy/x-components!RootXStoreState:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "store",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!WirePayload:interface",
          "docComment": "/**\n * The wire payload includes the payload of the event, and a {@link WireMetadata} object to add more information to the event.\n *\n * @typeParam PayloadType - The type of the event's payload\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WirePayload<PayloadType> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "PayloadType",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "WirePayload",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!WirePayload#eventPayload:member",
              "docComment": "/**\n * The payload of the event, which must be of type {@link XEventPayload}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventPayload: "
                },
                {
                  "kind": "Content",
                  "text": "PayloadType"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventPayload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!WirePayload#metadata:member",
              "docComment": "/**\n * An object containing information about the emission of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metadata: "
                },
                {
                  "kind": "Reference",
                  "text": "WireMetadata",
                  "canonicalReference": "@empathy/x-components!WireMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "metadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!WirePayloadParams:interface",
          "docComment": "/**\n * The type of the object passed as parameter to the payload of the {@link NamespacedWireFactory.(wireCommit:1)} method when this payload is a function. This object allow the access to the State and the Getters of a {@link XStoreModule}.\n *\n * @typeParam ModuleName - The {@link XModuleName} of the module of {@link NamespacedWireFactory}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WirePayloadParams<ModuleName extends "
            },
            {
              "kind": "Reference",
              "text": "XModuleName",
              "canonicalReference": "@empathy/x-components!XModuleName:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "ModuleName",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "WirePayloadParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!WirePayloadParams#getters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getters: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractGetters",
                  "canonicalReference": "@empathy/x-components!ExtractGetters:type"
                },
                {
                  "kind": "Content",
                  "text": "<ModuleName>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!WirePayloadParams#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractState",
                  "canonicalReference": "@empathy/x-components!ExtractState:type"
                },
                {
                  "kind": "Content",
                  "text": "<ModuleName>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!Wiring:type",
          "docComment": "/**\n * The Wiring is a record where each key is an EmpathyX event, and the value is a dictionary of wires.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Wiring = "
            },
            {
              "kind": "Content",
              "text": "{\n    [E in "
            },
            {
              "kind": "Reference",
              "text": "XEvent",
              "canonicalReference": "@empathy/x-components!XEvent:type"
            },
            {
              "kind": "Content",
              "text": "]: "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "WireForEvent",
              "canonicalReference": "@empathy/x-components!WireForEvent:type"
            },
            {
              "kind": "Content",
              "text": "<E>>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Wiring",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!withModule:function(1)",
          "docComment": "/**\n * Creates namespaced wire factory functions for the module name passed.\n *\n * @param moduleName - The module name for scoping the wire factory functions.\n *\n * @returns The {@link NamespacedWireFactory | WireFactory} namespaced with the XModule.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function withModule<ModuleName extends "
            },
            {
              "kind": "Reference",
              "text": "XModuleName",
              "canonicalReference": "@empathy/x-components!XModuleName:type"
            },
            {
              "kind": "Content",
              "text": ">(moduleName: "
            },
            {
              "kind": "Content",
              "text": "ModuleName"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "NamespacedWireFactory",
              "canonicalReference": "@empathy/x-components!NamespacedWireFactory:interface"
            },
            {
              "kind": "Content",
              "text": "<ModuleName>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "moduleName",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "ModuleName",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "withModule"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XActionContext:interface",
          "docComment": "/**\n * Type safe Vuex {@link https://vuex.vuejs.org/api/#actions | Action} context, with the local types of the module.\n *\n * @param State - The module state dictionary type definition.\n *\n * @param Getters - The module getters dictionary type definition.\n *\n * @param Mutations - The module mutation dictionary type definition.\n *\n * @param Actions - The module actions dictionary type definition.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XActionContext<State extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", Getters extends "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ", Mutations extends "
            },
            {
              "kind": "Reference",
              "text": "MutationsDictionary",
              "canonicalReference": "@empathy/x-components!MutationsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<Mutations>"
            },
            {
              "kind": "Content",
              "text": ", Actions extends "
            },
            {
              "kind": "Reference",
              "text": "ActionsDictionary",
              "canonicalReference": "@empathy/x-components!ActionsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<Actions>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "ActionContext",
              "canonicalReference": "vuex!ActionContext:interface"
            },
            {
              "kind": "Content",
              "text": "<State, "
            },
            {
              "kind": "Reference",
              "text": "RootXStoreState",
              "canonicalReference": "@empathy/x-components!RootXStoreState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Getters",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Mutations",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Actions",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "XActionContext",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XActionContext#commit:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commit<MutationName extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<Mutations, () => void>"
                },
                {
                  "kind": "Content",
                  "text": ">(mutation: "
                },
                {
                  "kind": "Content",
                  "text": "MutationName"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mutation",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "MutationName",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "commit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XActionContext#commit:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commit<MutationName extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof Mutations"
                },
                {
                  "kind": "Content",
                  "text": ">(mutation: "
                },
                {
                  "kind": "Content",
                  "text": "MutationName"
                },
                {
                  "kind": "Content",
                  "text": ", payload: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractPayload",
                  "canonicalReference": "@empathy/x-components!ExtractPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Mutations[MutationName]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "mutation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "MutationName",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "commit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XActionContext#dispatch:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispatch<ActionName extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<Actions, () => any>"
                },
                {
                  "kind": "Content",
                  "text": ">(action: "
                },
                {
                  "kind": "Content",
                  "text": "ActionName"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractActionReturn",
                  "canonicalReference": "@empathy/x-components!ExtractActionReturn:type"
                },
                {
                  "kind": "Content",
                  "text": "<Actions[ActionName]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "action",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ActionName",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "dispatch"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XActionContext#dispatch:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispatch<ActionName extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof Actions"
                },
                {
                  "kind": "Content",
                  "text": ">(action: "
                },
                {
                  "kind": "Content",
                  "text": "ActionName"
                },
                {
                  "kind": "Content",
                  "text": ", payload: "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractPayload",
                  "canonicalReference": "@empathy/x-components!ExtractPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Actions[ActionName]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ExtractActionReturn",
                  "canonicalReference": "@empathy/x-components!ExtractActionReturn:type"
                },
                {
                  "kind": "Content",
                  "text": "<Actions[ActionName]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "action",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ActionName",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "dispatch"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XActionContext#getters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getters: "
                },
                {
                  "kind": "Content",
                  "text": "Getters"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 11,
              "endIndex": 15
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XAPI:interface",
          "docComment": "/**\n * Interface with the API functions exposes as X {@link https://developer.mozilla.org/en-US/docs/Web/API/Window | window} property.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XAPI "
            }
          ],
          "releaseTag": "Public",
          "name": "XAPI",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XAPI#search:member(1)",
              "docComment": "/**\n * Throw a search with the query parameter.\n *\n * @param query - Query to be searched.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "search(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "search"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XBus:interface",
          "docComment": "/**\n * The events bus that allows emitting and subscribing to {@link XEventsTypes}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XBus "
            }
          ],
          "releaseTag": "Public",
          "name": "XBus",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XBus#emit:member(1)",
              "docComment": "/**\n * Emits an event with the `void` type associated as payload.\n *\n * @param event - The event name.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit(event: "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ", void>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "emit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XBus#emit:member(2)",
              "docComment": "/**\n * Emits an event with a non-void payload.\n *\n * @param event - The event name.\n *\n * @param payload - The payload of the event.\n *\n * @param metadata - The {@link WireMetadata | metadata} of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit<Event extends "
                },
                {
                  "kind": "Reference",
                  "text": "XEvent",
                  "canonicalReference": "@empathy/x-components!XEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", payload: "
                },
                {
                  "kind": "Reference",
                  "text": "XEventPayload",
                  "canonicalReference": "@empathy/x-components!XEventPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Event>"
                },
                {
                  "kind": "Content",
                  "text": ", metadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "WireMetadata",
                  "canonicalReference": "@empathy/x-components!WireMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "metadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "emit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XBus#on:member(1)",
              "docComment": "/**\n * Retrieves the observable for an event.\n *\n * @param event - The event to retrieve an observable for.\n *\n * @param withMetadata - When set to `true`, the returned observable payload will be a {@link WirePayload}.\n *\n * @returns An Observable of {@link WirePayload} object containing the event payload and the event metadata.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on<Event extends "
                },
                {
                  "kind": "Reference",
                  "text": "XEvent",
                  "canonicalReference": "@empathy/x-components!XEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", withMetadata: "
                },
                {
                  "kind": "Content",
                  "text": "true"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WirePayload",
                  "canonicalReference": "@empathy/x-components!WirePayload:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventPayload",
                  "canonicalReference": "@empathy/x-components!XEventPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Event>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "withMetadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XBus#on:member(2)",
              "docComment": "/**\n * Retrieves the observable for an event.\n *\n * @param event - The event to retrieve an observable for.\n *\n * @param withMetadata - When set to `false`, the observable payload will be the Event payload.\n *\n * @returns An Observable of the event payload.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on<Event extends "
                },
                {
                  "kind": "Reference",
                  "text": "XEvent",
                  "canonicalReference": "@empathy/x-components!XEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", withMetadata?: "
                },
                {
                  "kind": "Content",
                  "text": "false"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventPayload",
                  "canonicalReference": "@empathy/x-components!XEventPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Event>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "withMetadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XBus#on:member(3)",
              "docComment": "/**\n * Retrieves the observable for an event.\n *\n * @param event - The event to retrieve an observable for.\n *\n * @param withMetadata - If `true` the returned Observable payload will contain the Event payload and the Event metadata. If `false`, the observable payload will only be the event payload.\n *\n * @returns If `withMetadata` is `true`, an Observable of {@link WirePayload} object containing the event payload and more metadata. If `withMetadata` is `false`, an Observable of the Event payload.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on<Event extends "
                },
                {
                  "kind": "Reference",
                  "text": "XEvent",
                  "canonicalReference": "@empathy/x-components!XEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", withMetadata: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Observable",
                  "canonicalReference": "rxjs!Observable:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventPayload",
                  "canonicalReference": "@empathy/x-components!XEventPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Event> | "
                },
                {
                  "kind": "Reference",
                  "text": "WirePayload",
                  "canonicalReference": "@empathy/x-components!WirePayload:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventPayload",
                  "canonicalReference": "@empathy/x-components!XEventPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Event>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "withMetadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XComponent:interface",
          "docComment": "/**\n * An XComponent is just a normal Vue component that has an {@link XModule} linked to its usage. If the XComponent is imported in a consumer project, the {@link XModule} will be registered.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XComponent extends "
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "XComponent",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XComponent#setConfig:member(1)",
              "docComment": "/**\n * If implemented, method that handles setting a single configuration value.\n *\n * @param configPropName - The name of the configuration option to set.\n *\n * @param configPropValue - The value of the configuration option to set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setConfig?(configPropName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", configPropValue: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "configPropName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "configPropValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setConfig"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XComponentAPI:interface",
          "docComment": "/**\n * The XComponentAPI exposes access to the {@link XBus} and {@link XConfig} to the components.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XComponentAPI extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XBus",
              "canonicalReference": "@empathy/x-components!XBus:interface"
            },
            {
              "kind": "Content",
              "text": ", 'on'> "
            }
          ],
          "releaseTag": "Public",
          "name": "XComponentAPI",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XComponentAPI#config:member",
              "docComment": "/**\n * The global configuration accessible from every component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "XConfig",
                  "canonicalReference": "@empathy/x-components!XConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XComponentAPI#emit:member(1)",
              "docComment": "/**\n * Emits an event with the `void` type associated as payload.\n *\n * @param event - The event name.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit(event: "
                },
                {
                  "kind": "Reference",
                  "text": "PropsWithType",
                  "canonicalReference": "@empathy/x-components!PropsWithType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XEventsTypes",
                  "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
                },
                {
                  "kind": "Content",
                  "text": ", void>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "emit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@empathy/x-components!XComponentAPI#emit:member(2)",
              "docComment": "/**\n * Emits an event with a non-void payload.\n *\n * @param event - The event name.\n *\n * @param payload - The payload of the event.\n *\n * @param metadata - The {@link WireMetadata | metadata} of the event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit<Event extends "
                },
                {
                  "kind": "Reference",
                  "text": "XEvent",
                  "canonicalReference": "@empathy/x-components!XEvent:type"
                },
                {
                  "kind": "Content",
                  "text": ">(event: "
                },
                {
                  "kind": "Content",
                  "text": "Event"
                },
                {
                  "kind": "Content",
                  "text": ", payload: "
                },
                {
                  "kind": "Reference",
                  "text": "XEventPayload",
                  "canonicalReference": "@empathy/x-components!XEventPayload:type"
                },
                {
                  "kind": "Content",
                  "text": "<Event>"
                },
                {
                  "kind": "Content",
                  "text": ", metadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "Omit",
                  "canonicalReference": "!Omit:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WireMetadata",
                  "canonicalReference": "@empathy/x-components!WireMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'moduleName'>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "payload",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "metadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 12
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Event",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "emit"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!xComponentMixin:function(1)",
          "docComment": "/**\n * Initializes a component as an X-Component: * Registers the module passed as parameter. * Flags the component as X-Component, so then it can be detected with the {@link isXComponent} function. Creates props for each config option in the store module, and creates a link between the prop and the store value If the component has a `setConfig` method, then this method will be called when any of the config props changes.\n *\n * @param module - The module associated to the X-Component using this mixin.\n *\n * @param config - Optional {@link XComponentOptions} options.\n *\n * @returns Mixin for the module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function xComponentMixin(module: "
            },
            {
              "kind": "Reference",
              "text": "AnyXModule",
              "canonicalReference": "@empathy/x-components!AnyXModule:type"
            },
            {
              "kind": "Content",
              "text": ", { configPropsNames }?: "
            },
            {
              "kind": "Reference",
              "text": "XComponentOptions",
              "canonicalReference": "@empathy/x-components!XComponentOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ComponentOptions",
              "canonicalReference": "vue!~ComponentOptions:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vue",
              "canonicalReference": "vue!Vue:interface"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "ThisType",
              "canonicalReference": "!ThisType:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XComponent",
              "canonicalReference": "@empathy/x-components!XComponent:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "module",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "{ configPropsNames }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "xComponentMixin"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XComponentOptions:interface",
          "docComment": "/**\n * Options to be passed to the mixin factory {@link xComponentMixin}, an which allows customizing its behavior.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XComponentOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "XComponentOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XComponentOptions#configPropsNames:member",
              "docComment": "/**\n * Configuration key names to be generated as prop for an XComponent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configPropsNames?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "configPropsNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XConfig:interface",
          "docComment": "/**\n * The global configuration accessible from every component.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "XConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XConfig#consent:member",
              "docComment": "/**\n * Consent to send the user data (userId and sessionId) to our API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "consent: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "consent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XConfig#currencyOptions:member",
              "docComment": "/**\n * The {@link CurrencyOptions} to format currency values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currencyOptions: "
                },
                {
                  "kind": "Reference",
                  "text": "CurrencyOptions",
                  "canonicalReference": "@empathy/x-components!CurrencyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currencyOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XConfig#documentDirection:member",
              "docComment": "/**\n * HTML dir attribute. Possible values are: ltr(left to right) or rtl(right to left).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "documentDirection: "
                },
                {
                  "kind": "Reference",
                  "text": "DocumentDirection",
                  "canonicalReference": "@empathy/x-components!DocumentDirection:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "documentDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XConfig#messages:member",
              "docComment": "/**\n * The {@link Messages} to display in the visual components (i.e. SearchBox placeholder.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messages: "
                },
                {
                  "kind": "Reference",
                  "text": "Messages",
                  "canonicalReference": "@empathy/x-components!Messages:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "messages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!XEvent:type",
          "docComment": "/**\n * Name of all available events.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type XEvent = "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "XEventsTypes",
              "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "XEvent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!XEventPayload:type",
          "docComment": "/**\n * Extracts the payload type of an event.\n *\n * @typeParam Event - The {@link XEvent} to extract its payload type\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type XEventPayload<Event extends "
            },
            {
              "kind": "Reference",
              "text": "XEvent",
              "canonicalReference": "@empathy/x-components!XEvent:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "XEventsTypes",
              "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
            },
            {
              "kind": "Content",
              "text": "[Event] extends void ? undefined : "
            },
            {
              "kind": "Reference",
              "text": "XEventsTypes",
              "canonicalReference": "@empathy/x-components!XEventsTypes:interface"
            },
            {
              "kind": "Content",
              "text": "[Event]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "XEventPayload",
          "typeParameters": [
            {
              "typeParameterName": "Event",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XEventsTypes:interface",
          "docComment": "/**\n * Dictionary of the events of EmpathyX, where each key is the event name, and the value is the event payload type or `void` if it has no payload.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XEventsTypes "
            }
          ],
          "releaseTag": "Public",
          "name": "XEventsTypes",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#AdapterConfigChanged:member",
              "docComment": "/**\n * The search adapter configuration has changed * Payload: The new search adapter configuration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AdapterConfigChanged: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AdapterConfigChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#ConfigConsentChanged:member",
              "docComment": "/**\n * The {@link XConfig.consent} has changed * Payload: The new consent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ConfigConsentChanged: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ConfigConsentChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#ConfigCurrencyChanged:member",
              "docComment": "/**\n * The {@link XConfig.currencyOptions} has changed * Payload: The new currency.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ConfigCurrencyChanged: "
                },
                {
                  "kind": "Reference",
                  "text": "CurrencyOptions",
                  "canonicalReference": "@empathy/x-components!CurrencyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ConfigCurrencyChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#ConfigDocumentDirectionChanged:member",
              "docComment": "/**\n * The {@link XConfig.documentDirection} has changed * Payload: The new document direction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ConfigDocumentDirectionChanged: "
                },
                {
                  "kind": "Reference",
                  "text": "DocumentDirection",
                  "canonicalReference": "@empathy/x-components!DocumentDirection:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ConfigDocumentDirectionChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#HistoryQueriesDisplayed:member",
              "docComment": "/**\n * The current history queries have been displayed to the user. * Payload: The displayed history queries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HistoryQueriesDisplayed: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "HistoryQueriesDisplayed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#HistoryQueriesQueryChanged:member",
              "docComment": "/**\n * The query for searching inside the history-queries has changed. * Payload: The history-queries query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HistoryQueriesQueryChanged: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "HistoryQueriesQueryChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#HistoryQueriesStorageKeyChanged:member",
              "docComment": "/**\n * The key for saving the history queries in to the browser storage has changed. * Payload: The new history-queries storage key.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HistoryQueriesStorageKeyChanged: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "HistoryQueriesStorageKeyChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#NextQueriesChanged:member",
              "docComment": "/**\n * Next Queries have been changed. * Payload: The new {@link @empathy/search-types#NextQuery | next queries}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NextQueriesChanged: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQuery",
                  "canonicalReference": "@empathy/search-types!NextQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "NextQueriesChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#NextQueriesDisplayed:member",
              "docComment": "/**\n * The current next queries have been displayed to the user. * Payload: The displayed next queries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NextQueriesDisplayed: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQuery",
                  "canonicalReference": "@empathy/search-types!NextQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "NextQueriesDisplayed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#NextQueriesRequestChanged:member",
              "docComment": "/**\n * Any property of the next-queries request has changed * Payload: The new next-queries request or `null` if there is not enough data in the state to conform a valid request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NextQueriesRequestChanged: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQueriesRequest",
                  "canonicalReference": "@empathy/search-adapter!NextQueriesRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "NextQueriesRequestChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#PopularSearchDisplayed:member",
              "docComment": "/**\n * The popular searches have been displayed. * Payload: The displayed {@link @empathy/search-types#Suggestion | popular searches}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PopularSearchDisplayed: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "PopularSearchDisplayed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#PopularSearchesRequestChanged:member",
              "docComment": "/**\n * Any property of the popular-searches request has changed * Payload: The new popular-search request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PopularSearchesRequestChanged: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsRequest",
                  "canonicalReference": "@empathy/search-adapter!SuggestionsRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "PopularSearchesRequestChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#QuerySuggestionsChanged:member",
              "docComment": "/**\n * Query suggestions have been changed. * Payload: The new {@link @empathy/search-types#Suggestion | query suggestions}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "QuerySuggestionsChanged: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "QuerySuggestionsChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#QuerySuggestionsDisplayed:member",
              "docComment": "/**\n * The query suggestions have been displayed. * Payload: The displayed {@link @empathy/search-types#Suggestion | query suggestions}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "QuerySuggestionsDisplayed: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "QuerySuggestionsDisplayed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#QuerySuggestionsRequestChanged:member",
              "docComment": "/**\n * Any property of the query-suggestions request has changed. * Payload: The new query suggestions request or `null` if there is not enough data in the state to conform a valid request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "QuerySuggestionsRequestChanged: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsRequest",
                  "canonicalReference": "@empathy/search-adapter!SuggestionsRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "QuerySuggestionsRequestChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#SearchBoxQueryChanged:member",
              "docComment": "/**\n * The search-box query has changed * Payload: The new search-box query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SearchBoxQueryChanged: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "SearchBoxQueryChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#SessionHistoryQueriesChanged:member",
              "docComment": "/**\n * The queries made in the current session have changed * Payload: The session history queries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SessionHistoryQueriesChanged: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "SessionHistoryQueriesChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#SuggestionsDisplayed:member",
              "docComment": "/**\n * Any kind of suggestions have been displayed (query-suggestions, popular searches...) * Payload: The displayed {@link @empathy/search-types#Suggestion | suggestions}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SuggestionsDisplayed: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "SuggestionsDisplayed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserAcceptedAQuery:member",
              "docComment": "/**\n * The user has accepted a query * Payload: the accepted query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserAcceptedAQuery: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserAcceptedAQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserBlurredSearchBox:member",
              "docComment": "/**\n * The user removed the focus from the search-box. * Payload: none.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserBlurredSearchBox: "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserBlurredSearchBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserClosedX:member",
              "docComment": "/**\n * The user closed XComponents. * Payload: none.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserClosedX: "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserClosedX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserFocusedSearchBox:member",
              "docComment": "/**\n * The user focused the search-box * Payload: none.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserFocusedSearchBox: "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserFocusedSearchBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserIsTypingAQuery:member",
              "docComment": "/**\n * The user is typing/pasting a query * Payload: the partial query that the user is typing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserIsTypingAQuery: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserIsTypingAQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserOpenedX:member",
              "docComment": "/**\n * The user opened XComponents. * Payload: none.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserOpenedX: "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserOpenedX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserPressedArrowKey:member",
              "docComment": "/**\n * The user pressed an {@link ArrowKey | arrow key} with the focus on the search-box. * Payload: the pressed {@link ArrowKey | arrow key}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserPressedArrowKey: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrowKey",
                  "canonicalReference": "@empathy/x-components!ArrowKey:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserPressedArrowKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserPressedClearHistoryQueries:member",
              "docComment": "/**\n * The user pressed the button for clearing all the history queries. * Payload: none.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserPressedClearHistoryQueries: "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserPressedClearHistoryQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserPressedClearSearchBoxButton:member",
              "docComment": "/**\n * The user triggered the button that clears the search-box * Payload: none.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserPressedClearSearchBoxButton: "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserPressedClearSearchBoxButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserPressedEnterKey:member",
              "docComment": "/**\n * The user pressed the enter key with the focus on the search-box * Payload: the new query of the search-box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserPressedEnterKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserPressedEnterKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserPressedRemoveHistoryQuery:member",
              "docComment": "/**\n * The user pressed the button for removing a single {@link @empathy/search-types#HistoryQuery | history query}. * Payload: The `HistoryQuery` to remove.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserPressedRemoveHistoryQuery: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserPressedRemoveHistoryQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserPressedSearchButton:member",
              "docComment": "/**\n * The user pressed the search button * Payload: The query to search.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserPressedSearchButton: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserPressedSearchButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserSelectedAHistoryQuery:member",
              "docComment": "/**\n * The user has selected a history-query. * Payload: The {@link @empathy/search-types#HistoryQuery | history query} selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserSelectedAHistoryQuery: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQuery",
                  "canonicalReference": "@empathy/search-types!HistoryQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserSelectedAHistoryQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserSelectedANextQuery:member",
              "docComment": "/**\n * The user has selected a next-query * Payload: The next query that has been selected by the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserSelectedANextQuery: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQuery",
                  "canonicalReference": "@empathy/search-types!NextQuery:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserSelectedANextQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserSelectedAPopularSearch:member",
              "docComment": "/**\n * User selected a popular search * Payload: The popular search that the user selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserSelectedAPopularSearch: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserSelectedAPopularSearch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserSelectedAQuerySuggestion:member",
              "docComment": "/**\n * User selected a query suggestion * Payload: The {@link @empathy/search-types#Suggestion | query suggestion} that the user selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserSelectedAQuerySuggestion: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserSelectedAQuerySuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserSelectedASuggestion:member",
              "docComment": "/**\n * User selected any kind of suggestion (query-suggestion, popular-search...) * Payload: The {@link @empathy/search-types#Suggestion | suggestion} that the user selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserSelectedASuggestion: "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestion",
                  "canonicalReference": "@empathy/search-types!Suggestion:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserSelectedASuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XEventsTypes#UserTalked:member",
              "docComment": "/**\n * The user voiced a query * Payload: The spoken query.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserTalked: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "UserTalked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XModule:interface",
          "docComment": "/**\n * A group of a wiring configuration, a store module, and side effects.\n *\n * @param StoreModule - The store module state type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XModule<StoreModule extends "
            },
            {
              "kind": "Reference",
              "text": "AnyXStoreModule",
              "canonicalReference": "@empathy/x-components!AnyXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "StoreModule",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "XModule",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModule#name:member",
              "docComment": "/**\n * A unique name that identifies this XModule.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Reference",
                  "text": "XModuleName",
                  "canonicalReference": "@empathy/x-components!XModuleName:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModule#storeEmitters:member",
              "docComment": "/**\n * Watchers for the store module that will emit an XEvent when changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storeEmitters: "
                },
                {
                  "kind": "Reference",
                  "text": "StoreEmitters",
                  "canonicalReference": "@empathy/x-components!StoreEmitters:type"
                },
                {
                  "kind": "Content",
                  "text": "<StoreModule>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "storeEmitters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModule#storeModule:member",
              "docComment": "/**\n * The Vuex Store module associated to this module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storeModule: "
                },
                {
                  "kind": "Content",
                  "text": "StoreModule"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "storeModule",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModule#wiring:member",
              "docComment": "/**\n * The wiring associated to this module. It must only access to the store module of this XModule.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wiring: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Wiring",
                  "canonicalReference": "@empathy/x-components!Wiring:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wiring",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!XModuleName:type",
          "docComment": "/**\n * Names of all of the {@link XModule | XModules} available.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type XModuleName = "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "XModulesTree",
              "canonicalReference": "@empathy/x-components!XModulesTree:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "XModuleName",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XModuleOptions:interface",
          "docComment": "/**\n * Options for overriding a default XModule configuration.\n *\n * @typeParam Module - The module name to modify its default configuration\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XModuleOptions<Module extends "
            },
            {
              "kind": "Reference",
              "text": "AnyXModule",
              "canonicalReference": "@empathy/x-components!AnyXModule:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Module",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "XModuleOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModuleOptions#storeEmitters:member",
              "docComment": "/**\n * The options to override events that will be emitted when a the getters value or the state of the store changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storeEmitters?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StoreEmitters",
                  "canonicalReference": "@empathy/x-components!StoreEmitters:type"
                },
                {
                  "kind": "Content",
                  "text": "<Module['storeModule']>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "storeEmitters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModuleOptions#storeModule:member",
              "docComment": "/**\n * The options to override the default store module configuration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storeModule?: "
                },
                {
                  "kind": "Reference",
                  "text": "XStoreModuleOptions",
                  "canonicalReference": "@empathy/x-components!XStoreModuleOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "<Module['storeModule']>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "storeModule",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModuleOptions#wiring:member",
              "docComment": "/**\n * The options to override the default wiring configuration for the module.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wiring?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Wiring",
                  "canonicalReference": "@empathy/x-components!Wiring:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wiring",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!XModulesOptions:type",
          "docComment": "/**\n * Options for overriding the default XModules configuration.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type XModulesOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    [N in "
            },
            {
              "kind": "Reference",
              "text": "XModuleName",
              "canonicalReference": "@empathy/x-components!XModuleName:type"
            },
            {
              "kind": "Content",
              "text": "]?: "
            },
            {
              "kind": "Reference",
              "text": "XModuleOptions",
              "canonicalReference": "@empathy/x-components!XModuleOptions:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "XModulesTree",
              "canonicalReference": "@empathy/x-components!XModulesTree:interface"
            },
            {
              "kind": "Content",
              "text": "[N]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "XModulesOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XModulesTree:interface",
          "docComment": "/**\n * Gives each {@link XModule} a name, that can be used to retrieve then its value.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XModulesTree "
            }
          ],
          "releaseTag": "Public",
          "name": "XModulesTree",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModulesTree#empathize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "empathize: "
                },
                {
                  "kind": "Reference",
                  "text": "EmpathizeXModule",
                  "canonicalReference": "@empathy/x-components!EmpathizeXModule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "empathize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModulesTree#historyQueries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "historyQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "HistoryQueriesXModule",
                  "canonicalReference": "@empathy/x-components!HistoryQueriesXModule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "historyQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModulesTree#nextQueries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextQueries: "
                },
                {
                  "kind": "Reference",
                  "text": "NextQueriesXModule",
                  "canonicalReference": "@empathy/x-components!NextQueriesXModule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nextQueries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModulesTree#noSuggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noSuggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "NoSuggestionsXModule",
                  "canonicalReference": "@empathy/x-components!NoSuggestionsXModule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "noSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModulesTree#popularSearches:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "popularSearches: "
                },
                {
                  "kind": "Reference",
                  "text": "PopularSearchesXModule",
                  "canonicalReference": "@empathy/x-components!PopularSearchesXModule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "popularSearches",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModulesTree#querySuggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "querySuggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "QuerySuggestionsXModule",
                  "canonicalReference": "@empathy/x-components!QuerySuggestionsXModule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "querySuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModulesTree#relatedTags:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "relatedTags: "
                },
                {
                  "kind": "Reference",
                  "text": "RelatedTagsXModule",
                  "canonicalReference": "@empathy/x-components!RelatedTagsXModule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "relatedTags",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XModulesTree#searchBox:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchBox: "
                },
                {
                  "kind": "Reference",
                  "text": "SearchBoxXModule",
                  "canonicalReference": "@empathy/x-components!SearchBoxXModule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "searchBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@empathy/x-components!XOn:function(1)",
          "docComment": "/**\n * Creates a subscription to an {@link XEvent} and un-subscribes on the beforeDestroy hook.\n *\n * @remarks\n *\n * The decorated property needs to be public for type inference to work.\n *\n * @param event - The {@link XEvent}.\n *\n * @returns Decorator that creates a subscription to an {@link XEvent} and un-subscribes on the beforeDestroy hook.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function XOn<Event extends "
            },
            {
              "kind": "Reference",
              "text": "XEvent",
              "canonicalReference": "@empathy/x-components!XEvent:type"
            },
            {
              "kind": "Content",
              "text": ">(event: "
            },
            {
              "kind": "Content",
              "text": "Event"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DecoratorFor",
              "canonicalReference": "@empathy/x-components!DecoratorFor:type"
            },
            {
              "kind": "Content",
              "text": "<(payload: "
            },
            {
              "kind": "Reference",
              "text": "XEventPayload",
              "canonicalReference": "@empathy/x-components!XEventPayload:type"
            },
            {
              "kind": "Content",
              "text": "<Event>) => void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "event",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Event",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "XOn"
        },
        {
          "kind": "Class",
          "canonicalReference": "@empathy/x-components!XPlugin:class",
          "docComment": "/**\n * Vue plugin that modifies each component instance, extending them with the {@link XComponentAPI | X Component API}.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `XPlugin` class.\n *\n * @example\n *\n * Minimal installation example. A search adapter is needed for the plugin to work, and connect to the API.\n * ```typescript\n * const adapter = new EmpathyAdapterBuilder()\n *  .withConfiguration({instance: 'my-instance-id'})\n *  .build();\n * Vue.use(XPlugin, { adapter });\n * ```\n *\n * @example\n *\n * If you are using {@link https://vuex.vuejs.org/ | Vuex} in your project you must install its plugin, and instantiate an store before installing the XPlugin:\n * ```typescript\n * Vue.use(Vuex);\n * const store = new Store({ ... });\n * Vue.use(XPlugin, { adapter, store });\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class XPlugin "
            }
          ],
          "releaseTag": "Public",
          "name": "XPlugin",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@empathy/x-components!XPlugin.adapter:member",
              "docComment": "/**\n * {@link @empathy/search-adapter#SearchAdapter | SearchAdapter} Is the middleware between the components and our API where data can be mapped to client needs.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "SearchAdapter",
                  "canonicalReference": "@empathy/search-adapter!SearchAdapter:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "adapter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!XPlugin.getConfig:member(1)",
              "docComment": "/**\n * Gets the global reactive {@link XConfig}.\n *\n * @returns Config - The xConfig.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getConfig(): "
                },
                {
                  "kind": "Reference",
                  "text": "XConfig",
                  "canonicalReference": "@empathy/x-components!XConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getConfig"
            },
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!XPlugin.registerXModule:member(1)",
              "docComment": "/**\n * If the plugin has already been installed, it immediately registers a {@link XModule}. If it has not been installed yet, it stores the module in a list until the plugin is installed.\n *\n * @param xModule - The module to register.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static registerXModule(xModule: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyXModule",
                  "canonicalReference": "@empathy/x-components!AnyXModule:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "xModule",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "registerXModule"
            },
            {
              "kind": "Method",
              "canonicalReference": "@empathy/x-components!XPlugin.setConfig:member(1)",
              "docComment": "/**\n * Overrides the existing {@link XConfig}.\n *\n * @param config - The new or partially new global {@link XConfig}.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static setConfig(config: "
                },
                {
                  "kind": "Reference",
                  "text": "DeepPartial",
                  "canonicalReference": "@empathy/x-components!DeepPartial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "XConfig",
                  "canonicalReference": "@empathy/x-components!XConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "setConfig"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XPluginOptions:interface",
          "docComment": "/**\n * {@link XPlugin} Installation options.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XPluginOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "XPluginOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XPluginOptions#adapter:member",
              "docComment": "/**\n * The adapter transforms the request for the the search and tagging APIs and its responses.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "SearchAdapter",
                  "canonicalReference": "@empathy/search-adapter!SearchAdapter:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "adapter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XPluginOptions#config:member",
              "docComment": "/**\n * The global {@link XConfig} accessible in any {@link XComponentAPI | XComponent}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config?: "
                },
                {
                  "kind": "Reference",
                  "text": "XConfig",
                  "canonicalReference": "@empathy/x-components!XConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XPluginOptions#store:member",
              "docComment": "/**\n * A Vuex store to install the X module. If not passed a new one will be created and injected into every component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "store?: "
                },
                {
                  "kind": "Reference",
                  "text": "Store",
                  "canonicalReference": "vuex!Store:class"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "store",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XPluginOptions#xModules:member",
              "docComment": "/**\n * Override the default configuration of the {@link XModule | XModules}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xModules?: "
                },
                {
                  "kind": "Reference",
                  "text": "XModulesOptions",
                  "canonicalReference": "@empathy/x-components!XModulesOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "xModules",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@empathy/x-components!XStoreModule:interface",
          "docComment": "/**\n * Type safe {@link https://vuex.vuejs.org/ | Vuex} store module.\n *\n * @example\n *\n * How to create a type safe store module:\n * ```typescript\n * interface SearchBoxState {\n *  query: string;\n * }\n *\n * interface SearchBoxGetters {\n *  safeQuery: string;\n * }\n *\n * interface SearchBoxMutations {\n *  setQuery(newQuery: string): void;\n * }\n *\n * interface SearchBoxActions {\n *  someAsyncExampleFunction(): Promise<string>;\n *  someExampleFunction(doThings: boolean): number;\n * }\n *\n * type SearchBoxXStoreModule = XStoreModule<SearchBoxState, SearchBoxGetters, SearchBoxMutations,\n *   SearchBoxActions>;\n *\n * const searchBoxXStoreModule: SearchBoxXStoreModule = {\n *  state: () => ({ query: '' }),\n *  getters: {\n *    safeQuery(state) {\n *      // Your implementation code\n *    }\n *  },\n *  mutations: {\n *    setQuery(state, newQuery) {\n *      // Your implementation code\n *    }\n *  },\n *  actions: {\n *   someAsyncExampleFunction() {\n *     // Your implementation code\n *   },\n *   someExampleFunction(context, doThings) {\n *     // Your implementation code\n *   }\n * }\n * };\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface XStoreModule<State extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof State, any>"
            },
            {
              "kind": "Content",
              "text": ", Getters extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<keyof Getters, any>"
            },
            {
              "kind": "Content",
              "text": ", Mutations extends "
            },
            {
              "kind": "Reference",
              "text": "MutationsDictionary",
              "canonicalReference": "@empathy/x-components!MutationsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<Mutations>"
            },
            {
              "kind": "Content",
              "text": ", Actions extends "
            },
            {
              "kind": "Reference",
              "text": "ActionsDictionary",
              "canonicalReference": "@empathy/x-components!ActionsDictionary:type"
            },
            {
              "kind": "Content",
              "text": "<Actions>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "State",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Getters",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Mutations",
              "constraintTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Actions",
              "constraintTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "XStoreModule",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XStoreModule#actions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actions: "
                },
                {
                  "kind": "Reference",
                  "text": "ActionsTree",
                  "canonicalReference": "@empathy/x-components!ActionsTree:type"
                },
                {
                  "kind": "Content",
                  "text": "<State, Getters, Mutations, Actions>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "actions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XStoreModule#getters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getters: "
                },
                {
                  "kind": "Reference",
                  "text": "GettersTree",
                  "canonicalReference": "@empathy/x-components!GettersTree:type"
                },
                {
                  "kind": "Content",
                  "text": "<State, Getters>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XStoreModule#mutations:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mutations: "
                },
                {
                  "kind": "Reference",
                  "text": "MutationsTree",
                  "canonicalReference": "@empathy/x-components!MutationsTree:type"
                },
                {
                  "kind": "Content",
                  "text": "<State, Mutations>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mutations",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@empathy/x-components!XStoreModule#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Content",
                  "text": "() => State"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@empathy/x-components!XStoreModuleOptions:type",
          "docComment": "/**\n * Options for overriding a default {@link XStoreModule}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type XStoreModuleOptions<StoreModule extends "
            },
            {
              "kind": "Reference",
              "text": "AnyXStoreModule",
              "canonicalReference": "@empathy/x-components!AnyXStoreModule:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "StoreModule extends "
            },
            {
              "kind": "Reference",
              "text": "XStoreModule",
              "canonicalReference": "@empathy/x-components!XStoreModule:interface"
            },
            {
              "kind": "Content",
              "text": "<infer State, infer Getters, infer Mutations, infer Actions> ? {\n    state?: "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "@empathy/x-components!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<State> & "
            },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@empathy/x-components!Dictionary:type"
            },
            {
              "kind": "Content",
              "text": ";\n    actions?: "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "@empathy/x-components!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ActionsTree",
              "canonicalReference": "@empathy/x-components!ActionsTree:type"
            },
            {
              "kind": "Content",
              "text": "<State, Getters, Mutations, Actions>> & "
            },
            {
              "kind": "Reference",
              "text": "AnyActionsTree",
              "canonicalReference": "@empathy/x-components!AnyActionsTree:type"
            },
            {
              "kind": "Content",
              "text": ";\n    getters?: "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "@empathy/x-components!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "GettersTree",
              "canonicalReference": "@empathy/x-components!GettersTree:type"
            },
            {
              "kind": "Content",
              "text": "<State, Getters>> & "
            },
            {
              "kind": "Reference",
              "text": "AnyGettersTree",
              "canonicalReference": "@empathy/x-components!AnyGettersTree:type"
            },
            {
              "kind": "Content",
              "text": ";\n    mutations?: "
            },
            {
              "kind": "Reference",
              "text": "DeepPartial",
              "canonicalReference": "@empathy/x-components!DeepPartial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MutationsTree",
              "canonicalReference": "@empathy/x-components!MutationsTree:type"
            },
            {
              "kind": "Content",
              "text": "<State, Mutations>> & "
            },
            {
              "kind": "Reference",
              "text": "AnyMutationsTree",
              "canonicalReference": "@empathy/x-components!AnyMutationsTree:type"
            },
            {
              "kind": "Content",
              "text": ";\n} : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "XStoreModuleOptions",
          "typeParameters": [
            {
              "typeParameterName": "StoreModule",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 28
          }
        }
      ]
    }
  ]
}
